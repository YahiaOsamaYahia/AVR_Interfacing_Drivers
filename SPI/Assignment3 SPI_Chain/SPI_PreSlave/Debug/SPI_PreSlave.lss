
SPI_PreSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aa8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b70  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004db  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 25 05 	call	0xa4a	; 0xa4a <main>
  64:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SET_Direction>:

#include "BIT_OP.h"
#include "STD_TYPES.h"
#include "DIO_Interface.h"

void SET_Direction(u8 port, u8 pin, u8 direction){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <SET_Direction+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <SET_Direction+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03
	switch (port){
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	09 f4       	brne	.+2      	; 0x96 <SET_Direction+0x2a>
  94:	47 c0       	rjmp	.+142    	; 0x124 <SET_Direction+0xb8>
  96:	2c 81       	ldd	r18, Y+4	; 0x04
  98:	3d 81       	ldd	r19, Y+5	; 0x05
  9a:	22 30       	cpi	r18, 0x02	; 2
  9c:	31 05       	cpc	r19, r1
  9e:	2c f4       	brge	.+10     	; 0xaa <SET_Direction+0x3e>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	71 f0       	breq	.+28     	; 0xc4 <SET_Direction+0x58>
  a8:	cb c0       	rjmp	.+406    	; 0x240 <SET_Direction+0x1d4>
  aa:	2c 81       	ldd	r18, Y+4	; 0x04
  ac:	3d 81       	ldd	r19, Y+5	; 0x05
  ae:	22 30       	cpi	r18, 0x02	; 2
  b0:	31 05       	cpc	r19, r1
  b2:	09 f4       	brne	.+2      	; 0xb6 <SET_Direction+0x4a>
  b4:	67 c0       	rjmp	.+206    	; 0x184 <SET_Direction+0x118>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	91 05       	cpc	r25, r1
  be:	09 f4       	brne	.+2      	; 0xc2 <SET_Direction+0x56>
  c0:	91 c0       	rjmp	.+290    	; 0x1e4 <SET_Direction+0x178>
  c2:	be c0       	rjmp	.+380    	; 0x240 <SET_Direction+0x1d4>
	case PORT_A:
		if(direction == INPUT){
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	88 23       	and	r24, r24
  c8:	a9 f4       	brne	.+42     	; 0xf4 <SET_Direction+0x88>
			CLR_BIT(DDRA,pin);
  ca:	aa e3       	ldi	r26, 0x3A	; 58
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e3       	ldi	r30, 0x3A	; 58
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	48 2f       	mov	r20, r24
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 2e       	mov	r0, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <SET_Direction+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <SET_Direction+0x78>
  ec:	80 95       	com	r24
  ee:	84 23       	and	r24, r20
  f0:	8c 93       	st	X, r24
  f2:	a6 c0       	rjmp	.+332    	; 0x240 <SET_Direction+0x1d4>
		}
		else if (direction == OUTPUT){
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	09 f0       	breq	.+2      	; 0xfc <SET_Direction+0x90>
  fa:	a2 c0       	rjmp	.+324    	; 0x240 <SET_Direction+0x1d4>
			SET_BIT(DDRA,pin);
  fc:	aa e3       	ldi	r26, 0x3A	; 58
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	ea e3       	ldi	r30, 0x3A	; 58
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	48 2f       	mov	r20, r24
 108:	8a 81       	ldd	r24, Y+2	; 0x02
 10a:	28 2f       	mov	r18, r24
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 2e       	mov	r0, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <SET_Direction+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <SET_Direction+0xaa>
 11e:	84 2b       	or	r24, r20
 120:	8c 93       	st	X, r24
 122:	8e c0       	rjmp	.+284    	; 0x240 <SET_Direction+0x1d4>
		}
		break;

	case PORT_B:
		if(direction == INPUT){
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	88 23       	and	r24, r24
 128:	a9 f4       	brne	.+42     	; 0x154 <SET_Direction+0xe8>
			CLR_BIT(DDRB,pin);
 12a:	a7 e3       	ldi	r26, 0x37	; 55
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e7 e3       	ldi	r30, 0x37	; 55
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	48 2f       	mov	r20, r24
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	28 2f       	mov	r18, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 2e       	mov	r0, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <SET_Direction+0xdc>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <SET_Direction+0xd8>
 14c:	80 95       	com	r24
 14e:	84 23       	and	r24, r20
 150:	8c 93       	st	X, r24
 152:	76 c0       	rjmp	.+236    	; 0x240 <SET_Direction+0x1d4>
		}
		else if (direction == OUTPUT){
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <SET_Direction+0xf0>
 15a:	72 c0       	rjmp	.+228    	; 0x240 <SET_Direction+0x1d4>
			SET_BIT(DDRB,pin);
 15c:	a7 e3       	ldi	r26, 0x37	; 55
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e7 e3       	ldi	r30, 0x37	; 55
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	48 2f       	mov	r20, r24
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <SET_Direction+0x10e>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <SET_Direction+0x10a>
 17e:	84 2b       	or	r24, r20
 180:	8c 93       	st	X, r24
 182:	5e c0       	rjmp	.+188    	; 0x240 <SET_Direction+0x1d4>
		}
		break;

	case PORT_C:
		if(direction == INPUT){
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	88 23       	and	r24, r24
 188:	a9 f4       	brne	.+42     	; 0x1b4 <SET_Direction+0x148>
			CLR_BIT(DDRC,pin);
 18a:	a4 e3       	ldi	r26, 0x34	; 52
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e4 e3       	ldi	r30, 0x34	; 52
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	48 2f       	mov	r20, r24
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 2e       	mov	r0, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <SET_Direction+0x13c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <SET_Direction+0x138>
 1ac:	80 95       	com	r24
 1ae:	84 23       	and	r24, r20
 1b0:	8c 93       	st	X, r24
 1b2:	46 c0       	rjmp	.+140    	; 0x240 <SET_Direction+0x1d4>
		}
		else if (direction == OUTPUT){
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	09 f0       	breq	.+2      	; 0x1bc <SET_Direction+0x150>
 1ba:	42 c0       	rjmp	.+132    	; 0x240 <SET_Direction+0x1d4>
			SET_BIT(DDRC,pin);
 1bc:	a4 e3       	ldi	r26, 0x34	; 52
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	e4 e3       	ldi	r30, 0x34	; 52
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 2e       	mov	r0, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <SET_Direction+0x16e>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <SET_Direction+0x16a>
 1de:	84 2b       	or	r24, r20
 1e0:	8c 93       	st	X, r24
 1e2:	2e c0       	rjmp	.+92     	; 0x240 <SET_Direction+0x1d4>
		}
		break;

	case PORT_D:
		if(direction == INPUT){
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	88 23       	and	r24, r24
 1e8:	a9 f4       	brne	.+42     	; 0x214 <SET_Direction+0x1a8>
			CLR_BIT(DDRD,pin);
 1ea:	a1 e3       	ldi	r26, 0x31	; 49
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	e1 e3       	ldi	r30, 0x31	; 49
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	48 2f       	mov	r20, r24
 1f6:	8a 81       	ldd	r24, Y+2	; 0x02
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 2e       	mov	r0, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <SET_Direction+0x19c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <SET_Direction+0x198>
 20c:	80 95       	com	r24
 20e:	84 23       	and	r24, r20
 210:	8c 93       	st	X, r24
 212:	16 c0       	rjmp	.+44     	; 0x240 <SET_Direction+0x1d4>
		}
		else if (direction == OUTPUT){
 214:	8b 81       	ldd	r24, Y+3	; 0x03
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	99 f4       	brne	.+38     	; 0x240 <SET_Direction+0x1d4>
			SET_BIT(DDRD,pin);
 21a:	a1 e3       	ldi	r26, 0x31	; 49
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e1 e3       	ldi	r30, 0x31	; 49
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	48 2f       	mov	r20, r24
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 2e       	mov	r0, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <SET_Direction+0x1cc>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <SET_Direction+0x1c8>
 23c:	84 2b       	or	r24, r20
 23e:	8c 93       	st	X, r24
		}
		break;
	}
}
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	cf 91       	pop	r28
 24c:	df 91       	pop	r29
 24e:	08 95       	ret

00000250 <SET_Value>:

void SET_Value(u8 port, u8 pin, u8 value){
 250:	df 93       	push	r29
 252:	cf 93       	push	r28
 254:	00 d0       	rcall	.+0      	; 0x256 <SET_Value+0x6>
 256:	00 d0       	rcall	.+0      	; 0x258 <SET_Value+0x8>
 258:	0f 92       	push	r0
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	89 83       	std	Y+1, r24	; 0x01
 260:	6a 83       	std	Y+2, r22	; 0x02
 262:	4b 83       	std	Y+3, r20	; 0x03
	switch (port){
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	3d 83       	std	Y+5, r19	; 0x05
 26c:	2c 83       	std	Y+4, r18	; 0x04
 26e:	8c 81       	ldd	r24, Y+4	; 0x04
 270:	9d 81       	ldd	r25, Y+5	; 0x05
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	91 05       	cpc	r25, r1
 276:	09 f4       	brne	.+2      	; 0x27a <SET_Value+0x2a>
 278:	47 c0       	rjmp	.+142    	; 0x308 <SET_Value+0xb8>
 27a:	2c 81       	ldd	r18, Y+4	; 0x04
 27c:	3d 81       	ldd	r19, Y+5	; 0x05
 27e:	22 30       	cpi	r18, 0x02	; 2
 280:	31 05       	cpc	r19, r1
 282:	2c f4       	brge	.+10     	; 0x28e <SET_Value+0x3e>
 284:	8c 81       	ldd	r24, Y+4	; 0x04
 286:	9d 81       	ldd	r25, Y+5	; 0x05
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	71 f0       	breq	.+28     	; 0x2a8 <SET_Value+0x58>
 28c:	cb c0       	rjmp	.+406    	; 0x424 <SET_Value+0x1d4>
 28e:	2c 81       	ldd	r18, Y+4	; 0x04
 290:	3d 81       	ldd	r19, Y+5	; 0x05
 292:	22 30       	cpi	r18, 0x02	; 2
 294:	31 05       	cpc	r19, r1
 296:	09 f4       	brne	.+2      	; 0x29a <SET_Value+0x4a>
 298:	67 c0       	rjmp	.+206    	; 0x368 <SET_Value+0x118>
 29a:	8c 81       	ldd	r24, Y+4	; 0x04
 29c:	9d 81       	ldd	r25, Y+5	; 0x05
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <SET_Value+0x56>
 2a4:	91 c0       	rjmp	.+290    	; 0x3c8 <SET_Value+0x178>
 2a6:	be c0       	rjmp	.+380    	; 0x424 <SET_Value+0x1d4>
	case PORT_A:
		if(value == LOW){
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	88 23       	and	r24, r24
 2ac:	a9 f4       	brne	.+42     	; 0x2d8 <SET_Value+0x88>
			CLR_BIT(PORTA,pin);
 2ae:	ab e3       	ldi	r26, 0x3B	; 59
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	eb e3       	ldi	r30, 0x3B	; 59
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	48 2f       	mov	r20, r24
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <SET_Value+0x7c>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <SET_Value+0x78>
 2d0:	80 95       	com	r24
 2d2:	84 23       	and	r24, r20
 2d4:	8c 93       	st	X, r24
 2d6:	a6 c0       	rjmp	.+332    	; 0x424 <SET_Value+0x1d4>
		}
		else if (value == HIGH){
 2d8:	8b 81       	ldd	r24, Y+3	; 0x03
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <SET_Value+0x90>
 2de:	a2 c0       	rjmp	.+324    	; 0x424 <SET_Value+0x1d4>
			SET_BIT(PORTA,pin);
 2e0:	ab e3       	ldi	r26, 0x3B	; 59
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	eb e3       	ldi	r30, 0x3B	; 59
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	48 2f       	mov	r20, r24
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	28 2f       	mov	r18, r24
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 2e       	mov	r0, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <SET_Value+0xae>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <SET_Value+0xaa>
 302:	84 2b       	or	r24, r20
 304:	8c 93       	st	X, r24
 306:	8e c0       	rjmp	.+284    	; 0x424 <SET_Value+0x1d4>
		}
		break;

	case PORT_B:
		if(value == LOW){
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	88 23       	and	r24, r24
 30c:	a9 f4       	brne	.+42     	; 0x338 <SET_Value+0xe8>
			CLR_BIT(PORTB,pin);
 30e:	a8 e3       	ldi	r26, 0x38	; 56
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e8 e3       	ldi	r30, 0x38	; 56
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 2e       	mov	r0, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <SET_Value+0xdc>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <SET_Value+0xd8>
 330:	80 95       	com	r24
 332:	84 23       	and	r24, r20
 334:	8c 93       	st	X, r24
 336:	76 c0       	rjmp	.+236    	; 0x424 <SET_Value+0x1d4>
		}
		else if (value == HIGH){
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <SET_Value+0xf0>
 33e:	72 c0       	rjmp	.+228    	; 0x424 <SET_Value+0x1d4>
			SET_BIT(PORTB,pin);
 340:	a8 e3       	ldi	r26, 0x38	; 56
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e8 e3       	ldi	r30, 0x38	; 56
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <SET_Value+0x10e>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <SET_Value+0x10a>
 362:	84 2b       	or	r24, r20
 364:	8c 93       	st	X, r24
 366:	5e c0       	rjmp	.+188    	; 0x424 <SET_Value+0x1d4>
		}
		break;

	case PORT_C:
		if(value == LOW){
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	88 23       	and	r24, r24
 36c:	a9 f4       	brne	.+42     	; 0x398 <SET_Value+0x148>
			CLR_BIT(PORTC,pin);
 36e:	a5 e3       	ldi	r26, 0x35	; 53
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	e5 e3       	ldi	r30, 0x35	; 53
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <SET_Value+0x13c>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <SET_Value+0x138>
 390:	80 95       	com	r24
 392:	84 23       	and	r24, r20
 394:	8c 93       	st	X, r24
 396:	46 c0       	rjmp	.+140    	; 0x424 <SET_Value+0x1d4>
		}
		else if (value == HIGH){
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	09 f0       	breq	.+2      	; 0x3a0 <SET_Value+0x150>
 39e:	42 c0       	rjmp	.+132    	; 0x424 <SET_Value+0x1d4>
			SET_BIT(PORTC,pin);
 3a0:	a5 e3       	ldi	r26, 0x35	; 53
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	e5 e3       	ldi	r30, 0x35	; 53
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	48 2f       	mov	r20, r24
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	28 2f       	mov	r18, r24
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 2e       	mov	r0, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <SET_Value+0x16e>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	0a 94       	dec	r0
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <SET_Value+0x16a>
 3c2:	84 2b       	or	r24, r20
 3c4:	8c 93       	st	X, r24
 3c6:	2e c0       	rjmp	.+92     	; 0x424 <SET_Value+0x1d4>
		}
		break;

	case PORT_D:
		if(value == LOW){
 3c8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ca:	88 23       	and	r24, r24
 3cc:	a9 f4       	brne	.+42     	; 0x3f8 <SET_Value+0x1a8>
			CLR_BIT(PORTD,pin);
 3ce:	a2 e3       	ldi	r26, 0x32	; 50
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e2 e3       	ldi	r30, 0x32	; 50
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8a 81       	ldd	r24, Y+2	; 0x02
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <SET_Value+0x19c>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <SET_Value+0x198>
 3f0:	80 95       	com	r24
 3f2:	84 23       	and	r24, r20
 3f4:	8c 93       	st	X, r24
 3f6:	16 c0       	rjmp	.+44     	; 0x424 <SET_Value+0x1d4>
		}
		else if (value == HIGH){
 3f8:	8b 81       	ldd	r24, Y+3	; 0x03
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	99 f4       	brne	.+38     	; 0x424 <SET_Value+0x1d4>
			SET_BIT(PORTD,pin);
 3fe:	a2 e3       	ldi	r26, 0x32	; 50
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e2 e3       	ldi	r30, 0x32	; 50
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	48 2f       	mov	r20, r24
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 2e       	mov	r0, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <SET_Value+0x1cc>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <SET_Value+0x1c8>
 420:	84 2b       	or	r24, r20
 422:	8c 93       	st	X, r24
		}
		break;
	}
}
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	cf 91       	pop	r28
 430:	df 91       	pop	r29
 432:	08 95       	ret

00000434 <GET_Value>:

u8 GET_Value(u8 port, u8 pin){
 434:	df 93       	push	r29
 436:	cf 93       	push	r28
 438:	00 d0       	rcall	.+0      	; 0x43a <GET_Value+0x6>
 43a:	00 d0       	rcall	.+0      	; 0x43c <GET_Value+0x8>
 43c:	0f 92       	push	r0
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	3d 83       	std	Y+5, r19	; 0x05
 44e:	2c 83       	std	Y+4, r18	; 0x04
 450:	4c 81       	ldd	r20, Y+4	; 0x04
 452:	5d 81       	ldd	r21, Y+5	; 0x05
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	51 05       	cpc	r21, r1
 458:	49 f1       	breq	.+82     	; 0x4ac <GET_Value+0x78>
 45a:	8c 81       	ldd	r24, Y+4	; 0x04
 45c:	9d 81       	ldd	r25, Y+5	; 0x05
 45e:	82 30       	cpi	r24, 0x02	; 2
 460:	91 05       	cpc	r25, r1
 462:	34 f4       	brge	.+12     	; 0x470 <GET_Value+0x3c>
 464:	2c 81       	ldd	r18, Y+4	; 0x04
 466:	3d 81       	ldd	r19, Y+5	; 0x05
 468:	21 15       	cp	r18, r1
 46a:	31 05       	cpc	r19, r1
 46c:	61 f0       	breq	.+24     	; 0x486 <GET_Value+0x52>
 46e:	57 c0       	rjmp	.+174    	; 0x51e <GET_Value+0xea>
 470:	4c 81       	ldd	r20, Y+4	; 0x04
 472:	5d 81       	ldd	r21, Y+5	; 0x05
 474:	42 30       	cpi	r20, 0x02	; 2
 476:	51 05       	cpc	r21, r1
 478:	61 f1       	breq	.+88     	; 0x4d2 <GET_Value+0x9e>
 47a:	8c 81       	ldd	r24, Y+4	; 0x04
 47c:	9d 81       	ldd	r25, Y+5	; 0x05
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	91 05       	cpc	r25, r1
 482:	d1 f1       	breq	.+116    	; 0x4f8 <GET_Value+0xc4>
 484:	4c c0       	rjmp	.+152    	; 0x51e <GET_Value+0xea>
	case PORT_A:
		return GET_BIT(PINA,pin);
 486:	e9 e3       	ldi	r30, 0x39	; 57
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	28 2f       	mov	r18, r24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	88 2f       	mov	r24, r24
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a9 01       	movw	r20, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <GET_Value+0x6a>
 49a:	55 95       	asr	r21
 49c:	47 95       	ror	r20
 49e:	8a 95       	dec	r24
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <GET_Value+0x66>
 4a2:	ca 01       	movw	r24, r20
 4a4:	58 2f       	mov	r21, r24
 4a6:	51 70       	andi	r21, 0x01	; 1
 4a8:	5b 83       	std	Y+3, r21	; 0x03
 4aa:	3a c0       	rjmp	.+116    	; 0x520 <GET_Value+0xec>
		break;
	case PORT_B:
		return GET_BIT(PINB,pin);
 4ac:	e6 e3       	ldi	r30, 0x36	; 54
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	28 2f       	mov	r18, r24
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	88 2f       	mov	r24, r24
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	a9 01       	movw	r20, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <GET_Value+0x90>
 4c0:	55 95       	asr	r21
 4c2:	47 95       	ror	r20
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <GET_Value+0x8c>
 4c8:	ca 01       	movw	r24, r20
 4ca:	58 2f       	mov	r21, r24
 4cc:	51 70       	andi	r21, 0x01	; 1
 4ce:	5b 83       	std	Y+3, r21	; 0x03
 4d0:	27 c0       	rjmp	.+78     	; 0x520 <GET_Value+0xec>
		break;
	case PORT_C:
		return GET_BIT(PINC,pin);
 4d2:	e3 e3       	ldi	r30, 0x33	; 51
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	88 2f       	mov	r24, r24
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	a9 01       	movw	r20, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <GET_Value+0xb6>
 4e6:	55 95       	asr	r21
 4e8:	47 95       	ror	r20
 4ea:	8a 95       	dec	r24
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <GET_Value+0xb2>
 4ee:	ca 01       	movw	r24, r20
 4f0:	58 2f       	mov	r21, r24
 4f2:	51 70       	andi	r21, 0x01	; 1
 4f4:	5b 83       	std	Y+3, r21	; 0x03
 4f6:	14 c0       	rjmp	.+40     	; 0x520 <GET_Value+0xec>
		break;
	case PORT_D:
		return GET_BIT(PIND,pin);
 4f8:	e0 e3       	ldi	r30, 0x30	; 48
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	8a 81       	ldd	r24, Y+2	; 0x02
 504:	88 2f       	mov	r24, r24
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	a9 01       	movw	r20, r18
 50a:	02 c0       	rjmp	.+4      	; 0x510 <GET_Value+0xdc>
 50c:	55 95       	asr	r21
 50e:	47 95       	ror	r20
 510:	8a 95       	dec	r24
 512:	e2 f7       	brpl	.-8      	; 0x50c <GET_Value+0xd8>
 514:	ca 01       	movw	r24, r20
 516:	58 2f       	mov	r21, r24
 518:	51 70       	andi	r21, 0x01	; 1
 51a:	5b 83       	std	Y+3, r21	; 0x03
 51c:	01 c0       	rjmp	.+2      	; 0x520 <GET_Value+0xec>
		break;
	}
	return 0;
 51e:	1b 82       	std	Y+3, r1	; 0x03
 520:	8b 81       	ldd	r24, Y+3	; 0x03
}
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	cf 91       	pop	r28
 52e:	df 91       	pop	r29
 530:	08 95       	ret

00000532 <SET_Direction_4LSB>:

void SET_Direction_4LSB(u8 port, u8 direction){
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	00 d0       	rcall	.+0      	; 0x538 <SET_Direction_4LSB+0x6>
 538:	00 d0       	rcall	.+0      	; 0x53a <SET_Direction_4LSB+0x8>
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	89 83       	std	Y+1, r24	; 0x01
 540:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	3c 83       	std	Y+4, r19	; 0x04
 54a:	2b 83       	std	Y+3, r18	; 0x03
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	9c 81       	ldd	r25, Y+4	; 0x04
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	91 05       	cpc	r25, r1
 554:	69 f1       	breq	.+90     	; 0x5b0 <SET_Direction_4LSB+0x7e>
 556:	2b 81       	ldd	r18, Y+3	; 0x03
 558:	3c 81       	ldd	r19, Y+4	; 0x04
 55a:	22 30       	cpi	r18, 0x02	; 2
 55c:	31 05       	cpc	r19, r1
 55e:	2c f4       	brge	.+10     	; 0x56a <SET_Direction_4LSB+0x38>
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	9c 81       	ldd	r25, Y+4	; 0x04
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	69 f0       	breq	.+26     	; 0x582 <SET_Direction_4LSB+0x50>
 568:	64 c0       	rjmp	.+200    	; 0x632 <SET_Direction_4LSB+0x100>
 56a:	2b 81       	ldd	r18, Y+3	; 0x03
 56c:	3c 81       	ldd	r19, Y+4	; 0x04
 56e:	22 30       	cpi	r18, 0x02	; 2
 570:	31 05       	cpc	r19, r1
 572:	a1 f1       	breq	.+104    	; 0x5dc <SET_Direction_4LSB+0xaa>
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	9c 81       	ldd	r25, Y+4	; 0x04
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	91 05       	cpc	r25, r1
 57c:	09 f4       	brne	.+2      	; 0x580 <SET_Direction_4LSB+0x4e>
 57e:	44 c0       	rjmp	.+136    	; 0x608 <SET_Direction_4LSB+0xd6>
 580:	58 c0       	rjmp	.+176    	; 0x632 <SET_Direction_4LSB+0x100>
	case PORT_A:
		if(direction == INPUT){
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	88 23       	and	r24, r24
 586:	41 f4       	brne	.+16     	; 0x598 <SET_Direction_4LSB+0x66>
			DDRA&=0xF0;
 588:	aa e3       	ldi	r26, 0x3A	; 58
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	ea e3       	ldi	r30, 0x3A	; 58
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	80 7f       	andi	r24, 0xF0	; 240
 594:	8c 93       	st	X, r24
 596:	4d c0       	rjmp	.+154    	; 0x632 <SET_Direction_4LSB+0x100>
		}
		else if (direction == OUTPUT){
 598:	8a 81       	ldd	r24, Y+2	; 0x02
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	09 f0       	breq	.+2      	; 0x5a0 <SET_Direction_4LSB+0x6e>
 59e:	49 c0       	rjmp	.+146    	; 0x632 <SET_Direction_4LSB+0x100>
			DDRA|=0x0F;
 5a0:	aa e3       	ldi	r26, 0x3A	; 58
 5a2:	b0 e0       	ldi	r27, 0x00	; 0
 5a4:	ea e3       	ldi	r30, 0x3A	; 58
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	8f 60       	ori	r24, 0x0F	; 15
 5ac:	8c 93       	st	X, r24
 5ae:	41 c0       	rjmp	.+130    	; 0x632 <SET_Direction_4LSB+0x100>
		}
		break;

	case PORT_B:
		if(direction == INPUT){
 5b0:	8a 81       	ldd	r24, Y+2	; 0x02
 5b2:	88 23       	and	r24, r24
 5b4:	41 f4       	brne	.+16     	; 0x5c6 <SET_Direction_4LSB+0x94>
			DDRB&=0xF0;
 5b6:	a7 e3       	ldi	r26, 0x37	; 55
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e7 e3       	ldi	r30, 0x37	; 55
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	80 7f       	andi	r24, 0xF0	; 240
 5c2:	8c 93       	st	X, r24
 5c4:	36 c0       	rjmp	.+108    	; 0x632 <SET_Direction_4LSB+0x100>
		}
		else if (direction == OUTPUT){
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	99 f5       	brne	.+102    	; 0x632 <SET_Direction_4LSB+0x100>
			DDRB|=0x0F;
 5cc:	a7 e3       	ldi	r26, 0x37	; 55
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	e7 e3       	ldi	r30, 0x37	; 55
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	8f 60       	ori	r24, 0x0F	; 15
 5d8:	8c 93       	st	X, r24
 5da:	2b c0       	rjmp	.+86     	; 0x632 <SET_Direction_4LSB+0x100>
		}
		break;

	case PORT_C:
		if(direction == INPUT){
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	88 23       	and	r24, r24
 5e0:	41 f4       	brne	.+16     	; 0x5f2 <SET_Direction_4LSB+0xc0>
			DDRC&=0xF0;
 5e2:	a4 e3       	ldi	r26, 0x34	; 52
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	e4 e3       	ldi	r30, 0x34	; 52
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	80 7f       	andi	r24, 0xF0	; 240
 5ee:	8c 93       	st	X, r24
 5f0:	20 c0       	rjmp	.+64     	; 0x632 <SET_Direction_4LSB+0x100>
		}
		else if (direction == OUTPUT){
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	e9 f4       	brne	.+58     	; 0x632 <SET_Direction_4LSB+0x100>
			DDRC|=0x0F;
 5f8:	a4 e3       	ldi	r26, 0x34	; 52
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e4 e3       	ldi	r30, 0x34	; 52
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	8f 60       	ori	r24, 0x0F	; 15
 604:	8c 93       	st	X, r24
 606:	15 c0       	rjmp	.+42     	; 0x632 <SET_Direction_4LSB+0x100>
		}
		break;

	case PORT_D:
		if(direction == INPUT){
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	88 23       	and	r24, r24
 60c:	41 f4       	brne	.+16     	; 0x61e <SET_Direction_4LSB+0xec>
			DDRD&=0xF0;
 60e:	a1 e3       	ldi	r26, 0x31	; 49
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	e1 e3       	ldi	r30, 0x31	; 49
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	80 7f       	andi	r24, 0xF0	; 240
 61a:	8c 93       	st	X, r24
 61c:	0a c0       	rjmp	.+20     	; 0x632 <SET_Direction_4LSB+0x100>
		}
		else if (direction == OUTPUT){
 61e:	8a 81       	ldd	r24, Y+2	; 0x02
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	39 f4       	brne	.+14     	; 0x632 <SET_Direction_4LSB+0x100>
			DDRD|=0x0F;
 624:	a1 e3       	ldi	r26, 0x31	; 49
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e1 e3       	ldi	r30, 0x31	; 49
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	8f 60       	ori	r24, 0x0F	; 15
 630:	8c 93       	st	X, r24
		}
		break;
	}
}
 632:	0f 90       	pop	r0
 634:	0f 90       	pop	r0
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	cf 91       	pop	r28
 63c:	df 91       	pop	r29
 63e:	08 95       	ret

00000640 <SET_Value_4LSB>:

void SET_Value_4LSB(u8 port, u8 value){
 640:	df 93       	push	r29
 642:	cf 93       	push	r28
 644:	00 d0       	rcall	.+0      	; 0x646 <SET_Value_4LSB+0x6>
 646:	00 d0       	rcall	.+0      	; 0x648 <SET_Value_4LSB+0x8>
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	89 83       	std	Y+1, r24	; 0x01
 64e:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
 650:	89 81       	ldd	r24, Y+1	; 0x01
 652:	28 2f       	mov	r18, r24
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	3c 83       	std	Y+4, r19	; 0x04
 658:	2b 83       	std	Y+3, r18	; 0x03
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	9c 81       	ldd	r25, Y+4	; 0x04
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	91 05       	cpc	r25, r1
 662:	29 f1       	breq	.+74     	; 0x6ae <SET_Value_4LSB+0x6e>
 664:	2b 81       	ldd	r18, Y+3	; 0x03
 666:	3c 81       	ldd	r19, Y+4	; 0x04
 668:	22 30       	cpi	r18, 0x02	; 2
 66a:	31 05       	cpc	r19, r1
 66c:	2c f4       	brge	.+10     	; 0x678 <SET_Value_4LSB+0x38>
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	9c 81       	ldd	r25, Y+4	; 0x04
 672:	00 97       	sbiw	r24, 0x00	; 0
 674:	61 f0       	breq	.+24     	; 0x68e <SET_Value_4LSB+0x4e>
 676:	4a c0       	rjmp	.+148    	; 0x70c <SET_Value_4LSB+0xcc>
 678:	2b 81       	ldd	r18, Y+3	; 0x03
 67a:	3c 81       	ldd	r19, Y+4	; 0x04
 67c:	22 30       	cpi	r18, 0x02	; 2
 67e:	31 05       	cpc	r19, r1
 680:	31 f1       	breq	.+76     	; 0x6ce <SET_Value_4LSB+0x8e>
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	9c 81       	ldd	r25, Y+4	; 0x04
 686:	83 30       	cpi	r24, 0x03	; 3
 688:	91 05       	cpc	r25, r1
 68a:	89 f1       	breq	.+98     	; 0x6ee <SET_Value_4LSB+0xae>
 68c:	3f c0       	rjmp	.+126    	; 0x70c <SET_Value_4LSB+0xcc>
		case PORT_A:
			PORTA&=0xF0;
 68e:	ab e3       	ldi	r26, 0x3B	; 59
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	eb e3       	ldi	r30, 0x3B	; 59
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	80 7f       	andi	r24, 0xF0	; 240
 69a:	8c 93       	st	X, r24
			PORTA|= value;
 69c:	ab e3       	ldi	r26, 0x3B	; 59
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	eb e3       	ldi	r30, 0x3B	; 59
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	90 81       	ld	r25, Z
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	89 2b       	or	r24, r25
 6aa:	8c 93       	st	X, r24
 6ac:	2f c0       	rjmp	.+94     	; 0x70c <SET_Value_4LSB+0xcc>
			break;

		case PORT_B:
			PORTB&=0xF0;
 6ae:	a8 e3       	ldi	r26, 0x38	; 56
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	e8 e3       	ldi	r30, 0x38	; 56
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	80 7f       	andi	r24, 0xF0	; 240
 6ba:	8c 93       	st	X, r24
			PORTB|= value;
 6bc:	a8 e3       	ldi	r26, 0x38	; 56
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	e8 e3       	ldi	r30, 0x38	; 56
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	90 81       	ld	r25, Z
 6c6:	8a 81       	ldd	r24, Y+2	; 0x02
 6c8:	89 2b       	or	r24, r25
 6ca:	8c 93       	st	X, r24
 6cc:	1f c0       	rjmp	.+62     	; 0x70c <SET_Value_4LSB+0xcc>
			break;

		case PORT_C:
			PORTC&=0xF0;
 6ce:	a5 e3       	ldi	r26, 0x35	; 53
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	e5 e3       	ldi	r30, 0x35	; 53
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	80 7f       	andi	r24, 0xF0	; 240
 6da:	8c 93       	st	X, r24
			PORTC|= value;
 6dc:	a5 e3       	ldi	r26, 0x35	; 53
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	e5 e3       	ldi	r30, 0x35	; 53
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	90 81       	ld	r25, Z
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	89 2b       	or	r24, r25
 6ea:	8c 93       	st	X, r24
 6ec:	0f c0       	rjmp	.+30     	; 0x70c <SET_Value_4LSB+0xcc>
			break;

		case PORT_D:
			PORTD&=0xF0;
 6ee:	a2 e3       	ldi	r26, 0x32	; 50
 6f0:	b0 e0       	ldi	r27, 0x00	; 0
 6f2:	e2 e3       	ldi	r30, 0x32	; 50
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	80 7f       	andi	r24, 0xF0	; 240
 6fa:	8c 93       	st	X, r24
			PORTD|= value;
 6fc:	a2 e3       	ldi	r26, 0x32	; 50
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	e2 e3       	ldi	r30, 0x32	; 50
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	90 81       	ld	r25, Z
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	89 2b       	or	r24, r25
 70a:	8c 93       	st	X, r24
			break;
		}
}
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	cf 91       	pop	r28
 716:	df 91       	pop	r29
 718:	08 95       	ret

0000071a <SET_Direction_4MSB>:


void SET_Direction_4MSB(u8 port, u8 direction){
 71a:	df 93       	push	r29
 71c:	cf 93       	push	r28
 71e:	00 d0       	rcall	.+0      	; 0x720 <SET_Direction_4MSB+0x6>
 720:	00 d0       	rcall	.+0      	; 0x722 <SET_Direction_4MSB+0x8>
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	89 83       	std	Y+1, r24	; 0x01
 728:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	3c 83       	std	Y+4, r19	; 0x04
 732:	2b 83       	std	Y+3, r18	; 0x03
 734:	8b 81       	ldd	r24, Y+3	; 0x03
 736:	9c 81       	ldd	r25, Y+4	; 0x04
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	91 05       	cpc	r25, r1
 73c:	69 f1       	breq	.+90     	; 0x798 <SET_Direction_4MSB+0x7e>
 73e:	2b 81       	ldd	r18, Y+3	; 0x03
 740:	3c 81       	ldd	r19, Y+4	; 0x04
 742:	22 30       	cpi	r18, 0x02	; 2
 744:	31 05       	cpc	r19, r1
 746:	2c f4       	brge	.+10     	; 0x752 <SET_Direction_4MSB+0x38>
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	9c 81       	ldd	r25, Y+4	; 0x04
 74c:	00 97       	sbiw	r24, 0x00	; 0
 74e:	69 f0       	breq	.+26     	; 0x76a <SET_Direction_4MSB+0x50>
 750:	64 c0       	rjmp	.+200    	; 0x81a <SET_Direction_4MSB+0x100>
 752:	2b 81       	ldd	r18, Y+3	; 0x03
 754:	3c 81       	ldd	r19, Y+4	; 0x04
 756:	22 30       	cpi	r18, 0x02	; 2
 758:	31 05       	cpc	r19, r1
 75a:	a1 f1       	breq	.+104    	; 0x7c4 <SET_Direction_4MSB+0xaa>
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	9c 81       	ldd	r25, Y+4	; 0x04
 760:	83 30       	cpi	r24, 0x03	; 3
 762:	91 05       	cpc	r25, r1
 764:	09 f4       	brne	.+2      	; 0x768 <SET_Direction_4MSB+0x4e>
 766:	44 c0       	rjmp	.+136    	; 0x7f0 <SET_Direction_4MSB+0xd6>
 768:	58 c0       	rjmp	.+176    	; 0x81a <SET_Direction_4MSB+0x100>
		case PORT_A:
			if(direction == INPUT){
 76a:	8a 81       	ldd	r24, Y+2	; 0x02
 76c:	88 23       	and	r24, r24
 76e:	41 f4       	brne	.+16     	; 0x780 <SET_Direction_4MSB+0x66>
				DDRA&=0x0F;
 770:	aa e3       	ldi	r26, 0x3A	; 58
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	ea e3       	ldi	r30, 0x3A	; 58
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	8f 70       	andi	r24, 0x0F	; 15
 77c:	8c 93       	st	X, r24
 77e:	4d c0       	rjmp	.+154    	; 0x81a <SET_Direction_4MSB+0x100>
			}
			else if (direction == OUTPUT){
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	09 f0       	breq	.+2      	; 0x788 <SET_Direction_4MSB+0x6e>
 786:	49 c0       	rjmp	.+146    	; 0x81a <SET_Direction_4MSB+0x100>
				DDRA|=0xF0;
 788:	aa e3       	ldi	r26, 0x3A	; 58
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	ea e3       	ldi	r30, 0x3A	; 58
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	80 6f       	ori	r24, 0xF0	; 240
 794:	8c 93       	st	X, r24
 796:	41 c0       	rjmp	.+130    	; 0x81a <SET_Direction_4MSB+0x100>
			}
			break;

		case PORT_B:
			if(direction == INPUT){
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	88 23       	and	r24, r24
 79c:	41 f4       	brne	.+16     	; 0x7ae <SET_Direction_4MSB+0x94>
				DDRB&=0x0F;
 79e:	a7 e3       	ldi	r26, 0x37	; 55
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	e7 e3       	ldi	r30, 0x37	; 55
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	8f 70       	andi	r24, 0x0F	; 15
 7aa:	8c 93       	st	X, r24
 7ac:	36 c0       	rjmp	.+108    	; 0x81a <SET_Direction_4MSB+0x100>
			}
			else if (direction == OUTPUT){
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	99 f5       	brne	.+102    	; 0x81a <SET_Direction_4MSB+0x100>
				DDRB|=0xF0;
 7b4:	a7 e3       	ldi	r26, 0x37	; 55
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	e7 e3       	ldi	r30, 0x37	; 55
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	80 81       	ld	r24, Z
 7be:	80 6f       	ori	r24, 0xF0	; 240
 7c0:	8c 93       	st	X, r24
 7c2:	2b c0       	rjmp	.+86     	; 0x81a <SET_Direction_4MSB+0x100>
			}
			break;

		case PORT_C:
			if(direction == INPUT){
 7c4:	8a 81       	ldd	r24, Y+2	; 0x02
 7c6:	88 23       	and	r24, r24
 7c8:	41 f4       	brne	.+16     	; 0x7da <SET_Direction_4MSB+0xc0>
				DDRC&=0x0F;
 7ca:	a4 e3       	ldi	r26, 0x34	; 52
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	e4 e3       	ldi	r30, 0x34	; 52
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	8f 70       	andi	r24, 0x0F	; 15
 7d6:	8c 93       	st	X, r24
 7d8:	20 c0       	rjmp	.+64     	; 0x81a <SET_Direction_4MSB+0x100>
			}
			else if (direction == OUTPUT){
 7da:	8a 81       	ldd	r24, Y+2	; 0x02
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	e9 f4       	brne	.+58     	; 0x81a <SET_Direction_4MSB+0x100>
				DDRC|=0xF0;
 7e0:	a4 e3       	ldi	r26, 0x34	; 52
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	e4 e3       	ldi	r30, 0x34	; 52
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	80 6f       	ori	r24, 0xF0	; 240
 7ec:	8c 93       	st	X, r24
 7ee:	15 c0       	rjmp	.+42     	; 0x81a <SET_Direction_4MSB+0x100>
			}
			break;

		case PORT_D:
			if(direction == INPUT){
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
 7f2:	88 23       	and	r24, r24
 7f4:	41 f4       	brne	.+16     	; 0x806 <SET_Direction_4MSB+0xec>
				DDRD&=0x0F;
 7f6:	a1 e3       	ldi	r26, 0x31	; 49
 7f8:	b0 e0       	ldi	r27, 0x00	; 0
 7fa:	e1 e3       	ldi	r30, 0x31	; 49
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	8f 70       	andi	r24, 0x0F	; 15
 802:	8c 93       	st	X, r24
 804:	0a c0       	rjmp	.+20     	; 0x81a <SET_Direction_4MSB+0x100>
			}
			else if (direction == OUTPUT){
 806:	8a 81       	ldd	r24, Y+2	; 0x02
 808:	81 30       	cpi	r24, 0x01	; 1
 80a:	39 f4       	brne	.+14     	; 0x81a <SET_Direction_4MSB+0x100>
				DDRD|=0xF0;
 80c:	a1 e3       	ldi	r26, 0x31	; 49
 80e:	b0 e0       	ldi	r27, 0x00	; 0
 810:	e1 e3       	ldi	r30, 0x31	; 49
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	80 6f       	ori	r24, 0xF0	; 240
 818:	8c 93       	st	X, r24
			}
			break;
		}
}
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	0f 90       	pop	r0
 822:	cf 91       	pop	r28
 824:	df 91       	pop	r29
 826:	08 95       	ret

00000828 <SET_Value_4MSB>:
void SET_Value_4MSB(u8 port, u8 value){
 828:	df 93       	push	r29
 82a:	cf 93       	push	r28
 82c:	00 d0       	rcall	.+0      	; 0x82e <SET_Value_4MSB+0x6>
 82e:	00 d0       	rcall	.+0      	; 0x830 <SET_Value_4MSB+0x8>
 830:	cd b7       	in	r28, 0x3d	; 61
 832:	de b7       	in	r29, 0x3e	; 62
 834:	89 83       	std	Y+1, r24	; 0x01
 836:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	28 2f       	mov	r18, r24
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	3c 83       	std	Y+4, r19	; 0x04
 840:	2b 83       	std	Y+3, r18	; 0x03
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	9c 81       	ldd	r25, Y+4	; 0x04
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	91 05       	cpc	r25, r1
 84a:	79 f1       	breq	.+94     	; 0x8aa <__stack+0x4b>
 84c:	2b 81       	ldd	r18, Y+3	; 0x03
 84e:	3c 81       	ldd	r19, Y+4	; 0x04
 850:	22 30       	cpi	r18, 0x02	; 2
 852:	31 05       	cpc	r19, r1
 854:	2c f4       	brge	.+10     	; 0x860 <__stack+0x1>
 856:	8b 81       	ldd	r24, Y+3	; 0x03
 858:	9c 81       	ldd	r25, Y+4	; 0x04
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	69 f0       	breq	.+26     	; 0x878 <__stack+0x19>
 85e:	6f c0       	rjmp	.+222    	; 0x93e <__stack+0xdf>
 860:	2b 81       	ldd	r18, Y+3	; 0x03
 862:	3c 81       	ldd	r19, Y+4	; 0x04
 864:	22 30       	cpi	r18, 0x02	; 2
 866:	31 05       	cpc	r19, r1
 868:	c9 f1       	breq	.+114    	; 0x8dc <__stack+0x7d>
 86a:	8b 81       	ldd	r24, Y+3	; 0x03
 86c:	9c 81       	ldd	r25, Y+4	; 0x04
 86e:	83 30       	cpi	r24, 0x03	; 3
 870:	91 05       	cpc	r25, r1
 872:	09 f4       	brne	.+2      	; 0x876 <__stack+0x17>
 874:	4c c0       	rjmp	.+152    	; 0x90e <__stack+0xaf>
 876:	63 c0       	rjmp	.+198    	; 0x93e <__stack+0xdf>
	case PORT_A:
				PORTA&=0x0F;
 878:	ab e3       	ldi	r26, 0x3B	; 59
 87a:	b0 e0       	ldi	r27, 0x00	; 0
 87c:	eb e3       	ldi	r30, 0x3B	; 59
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	8f 70       	andi	r24, 0x0F	; 15
 884:	8c 93       	st	X, r24
				PORTA|= value<<4;
 886:	ab e3       	ldi	r26, 0x3B	; 59
 888:	b0 e0       	ldi	r27, 0x00	; 0
 88a:	eb e3       	ldi	r30, 0x3B	; 59
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	28 2f       	mov	r18, r24
 892:	8a 81       	ldd	r24, Y+2	; 0x02
 894:	88 2f       	mov	r24, r24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	82 95       	swap	r24
 89a:	92 95       	swap	r25
 89c:	90 7f       	andi	r25, 0xF0	; 240
 89e:	98 27       	eor	r25, r24
 8a0:	80 7f       	andi	r24, 0xF0	; 240
 8a2:	98 27       	eor	r25, r24
 8a4:	82 2b       	or	r24, r18
 8a6:	8c 93       	st	X, r24
 8a8:	4a c0       	rjmp	.+148    	; 0x93e <__stack+0xdf>
				break;

			case PORT_B:
				PORTB&=0x0F;
 8aa:	a8 e3       	ldi	r26, 0x38	; 56
 8ac:	b0 e0       	ldi	r27, 0x00	; 0
 8ae:	e8 e3       	ldi	r30, 0x38	; 56
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	8f 70       	andi	r24, 0x0F	; 15
 8b6:	8c 93       	st	X, r24
				PORTB|= value<<4;
 8b8:	a8 e3       	ldi	r26, 0x38	; 56
 8ba:	b0 e0       	ldi	r27, 0x00	; 0
 8bc:	e8 e3       	ldi	r30, 0x38	; 56
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	28 2f       	mov	r18, r24
 8c4:	8a 81       	ldd	r24, Y+2	; 0x02
 8c6:	88 2f       	mov	r24, r24
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	82 95       	swap	r24
 8cc:	92 95       	swap	r25
 8ce:	90 7f       	andi	r25, 0xF0	; 240
 8d0:	98 27       	eor	r25, r24
 8d2:	80 7f       	andi	r24, 0xF0	; 240
 8d4:	98 27       	eor	r25, r24
 8d6:	82 2b       	or	r24, r18
 8d8:	8c 93       	st	X, r24
 8da:	31 c0       	rjmp	.+98     	; 0x93e <__stack+0xdf>
				break;

			case PORT_C:
				PORTC&=0x0F;
 8dc:	a5 e3       	ldi	r26, 0x35	; 53
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	e5 e3       	ldi	r30, 0x35	; 53
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	8f 70       	andi	r24, 0x0F	; 15
 8e8:	8c 93       	st	X, r24
				PORTC|= value<<4;
 8ea:	a5 e3       	ldi	r26, 0x35	; 53
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	e5 e3       	ldi	r30, 0x35	; 53
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	28 2f       	mov	r18, r24
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	88 2f       	mov	r24, r24
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	82 95       	swap	r24
 8fe:	92 95       	swap	r25
 900:	90 7f       	andi	r25, 0xF0	; 240
 902:	98 27       	eor	r25, r24
 904:	80 7f       	andi	r24, 0xF0	; 240
 906:	98 27       	eor	r25, r24
 908:	82 2b       	or	r24, r18
 90a:	8c 93       	st	X, r24
 90c:	18 c0       	rjmp	.+48     	; 0x93e <__stack+0xdf>
				break;

			case PORT_D:
				PORTD&=0x0F;
 90e:	a2 e3       	ldi	r26, 0x32	; 50
 910:	b0 e0       	ldi	r27, 0x00	; 0
 912:	e2 e3       	ldi	r30, 0x32	; 50
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	8f 70       	andi	r24, 0x0F	; 15
 91a:	8c 93       	st	X, r24
				PORTD|= value<<4;
 91c:	a2 e3       	ldi	r26, 0x32	; 50
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	e2 e3       	ldi	r30, 0x32	; 50
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	28 2f       	mov	r18, r24
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	88 2f       	mov	r24, r24
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	82 95       	swap	r24
 930:	92 95       	swap	r25
 932:	90 7f       	andi	r25, 0xF0	; 240
 934:	98 27       	eor	r25, r24
 936:	80 7f       	andi	r24, 0xF0	; 240
 938:	98 27       	eor	r25, r24
 93a:	82 2b       	or	r24, r18
 93c:	8c 93       	st	X, r24
				break;
			}
}
 93e:	0f 90       	pop	r0
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	0f 90       	pop	r0
 946:	cf 91       	pop	r28
 948:	df 91       	pop	r29
 94a:	08 95       	ret

0000094c <SPI_Init_Master>:
 */
#include "BIT_OP.h"
#include "STD_TYPES.h"
#include "SPI_Interface.h"

void SPI_Init_Master(){
 94c:	df 93       	push	r29
 94e:	cf 93       	push	r28
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
	//Set data order to LSB
	SET_BIT(SPCR, 5);
 954:	ad e2       	ldi	r26, 0x2D	; 45
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	ed e2       	ldi	r30, 0x2D	; 45
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	80 62       	ori	r24, 0x20	; 32
 960:	8c 93       	st	X, r24

	//Leading edge rising clock polarity
	CLR_BIT(SPCR, 3);
 962:	ad e2       	ldi	r26, 0x2D	; 45
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	ed e2       	ldi	r30, 0x2D	; 45
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 81       	ld	r24, Z
 96c:	87 7f       	andi	r24, 0xF7	; 247
 96e:	8c 93       	st	X, r24

	//sample at leading edge
	CLR_BIT(SPCR, 2);
 970:	ad e2       	ldi	r26, 0x2D	; 45
 972:	b0 e0       	ldi	r27, 0x00	; 0
 974:	ed e2       	ldi	r30, 0x2D	; 45
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	8b 7f       	andi	r24, 0xFB	; 251
 97c:	8c 93       	st	X, r24

	//64 pre-scaler
	CLR_BIT(SPSR, 0);
 97e:	ae e2       	ldi	r26, 0x2E	; 46
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	ee e2       	ldi	r30, 0x2E	; 46
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	8e 7f       	andi	r24, 0xFE	; 254
 98a:	8c 93       	st	X, r24
	SET_BIT(SPCR, 1);
 98c:	ad e2       	ldi	r26, 0x2D	; 45
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	ed e2       	ldi	r30, 0x2D	; 45
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	82 60       	ori	r24, 0x02	; 2
 998:	8c 93       	st	X, r24
	CLR_BIT(SPCR, 0);
 99a:	ad e2       	ldi	r26, 0x2D	; 45
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	ed e2       	ldi	r30, 0x2D	; 45
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	8e 7f       	andi	r24, 0xFE	; 254
 9a6:	8c 93       	st	X, r24

	//Master mode
	SET_BIT(SPCR, 4);
 9a8:	ad e2       	ldi	r26, 0x2D	; 45
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	ed e2       	ldi	r30, 0x2D	; 45
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	80 61       	ori	r24, 0x10	; 16
 9b4:	8c 93       	st	X, r24

	//Enable SPI
	SET_BIT(SPCR, 6);
 9b6:	ad e2       	ldi	r26, 0x2D	; 45
 9b8:	b0 e0       	ldi	r27, 0x00	; 0
 9ba:	ed e2       	ldi	r30, 0x2D	; 45
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	80 64       	ori	r24, 0x40	; 64
 9c2:	8c 93       	st	X, r24

}
 9c4:	cf 91       	pop	r28
 9c6:	df 91       	pop	r29
 9c8:	08 95       	ret

000009ca <SPI_Init_Slave>:

void SPI_Init_Slave(){
 9ca:	df 93       	push	r29
 9cc:	cf 93       	push	r28
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
	//Set data order to LSB
	SET_BIT(SPCR, 5);
 9d2:	ad e2       	ldi	r26, 0x2D	; 45
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	ed e2       	ldi	r30, 0x2D	; 45
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	80 62       	ori	r24, 0x20	; 32
 9de:	8c 93       	st	X, r24

	//Leading edge rising clock polarity
	CLR_BIT(SPCR, 3);
 9e0:	ad e2       	ldi	r26, 0x2D	; 45
 9e2:	b0 e0       	ldi	r27, 0x00	; 0
 9e4:	ed e2       	ldi	r30, 0x2D	; 45
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	80 81       	ld	r24, Z
 9ea:	87 7f       	andi	r24, 0xF7	; 247
 9ec:	8c 93       	st	X, r24

	//sample at leading edge
	CLR_BIT(SPCR, 2);
 9ee:	ad e2       	ldi	r26, 0x2D	; 45
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	ed e2       	ldi	r30, 0x2D	; 45
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	8b 7f       	andi	r24, 0xFB	; 251
 9fa:	8c 93       	st	X, r24

	//Slave mode
	CLR_BIT(SPCR, 4);
 9fc:	ad e2       	ldi	r26, 0x2D	; 45
 9fe:	b0 e0       	ldi	r27, 0x00	; 0
 a00:	ed e2       	ldi	r30, 0x2D	; 45
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	80 81       	ld	r24, Z
 a06:	8f 7e       	andi	r24, 0xEF	; 239
 a08:	8c 93       	st	X, r24

	//Enable SPI
	SET_BIT(SPCR, 6);
 a0a:	ad e2       	ldi	r26, 0x2D	; 45
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	ed e2       	ldi	r30, 0x2D	; 45
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	80 64       	ori	r24, 0x40	; 64
 a16:	8c 93       	st	X, r24
}
 a18:	cf 91       	pop	r28
 a1a:	df 91       	pop	r29
 a1c:	08 95       	ret

00000a1e <SPI_SendData>:

u8 SPI_SendData(u8 data){
 a1e:	df 93       	push	r29
 a20:	cf 93       	push	r28
 a22:	0f 92       	push	r0
 a24:	cd b7       	in	r28, 0x3d	; 61
 a26:	de b7       	in	r29, 0x3e	; 62
 a28:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
 a2a:	ef e2       	ldi	r30, 0x2F	; 47
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR, 7));
 a32:	ee e2       	ldi	r30, 0x2E	; 46
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	88 23       	and	r24, r24
 a3a:	dc f7       	brge	.-10     	; 0xa32 <SPI_SendData+0x14>
	return SPDR;
 a3c:	ef e2       	ldi	r30, 0x2F	; 47
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	80 81       	ld	r24, Z
}
 a42:	0f 90       	pop	r0
 a44:	cf 91       	pop	r28
 a46:	df 91       	pop	r29
 a48:	08 95       	ret

00000a4a <main>:
#include "BIT_OP.h"
#include "STD_TYPES.h"
#include "DIO_Interface.h"
#include "SPI_Interface.h"

int main(){
 a4a:	df 93       	push	r29
 a4c:	cf 93       	push	r28
 a4e:	0f 92       	push	r0
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62

	SET_Direction(PORT_B, PIN_5, INPUT);
 a54:	81 e0       	ldi	r24, 0x01	; 1
 a56:	65 e0       	ldi	r22, 0x05	; 5
 a58:	40 e0       	ldi	r20, 0x00	; 0
 a5a:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	SET_Direction(PORT_B, PIN_6, OUTPUT);
 a5e:	81 e0       	ldi	r24, 0x01	; 1
 a60:	66 e0       	ldi	r22, 0x06	; 6
 a62:	41 e0       	ldi	r20, 0x01	; 1
 a64:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	SET_Direction(PORT_B, PIN_4, INPUT);
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	64 e0       	ldi	r22, 0x04	; 4
 a6c:	40 e0       	ldi	r20, 0x00	; 0
 a6e:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	SET_Direction(PORT_B, PIN_7, INPUT);
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	67 e0       	ldi	r22, 0x07	; 7
 a76:	40 e0       	ldi	r20, 0x00	; 0
 a78:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	//SET_Value(PORT_B, PIN_0, HIGH);
	//SET_Value(PORT_B, PIN_4, LOW);
	SPI_Init_Slave();
 a7c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <SPI_Init_Slave>


		while(1){
				//SPI_SendData(SPDR);
			u8 receivedData = SPI_SendData(0xFF);  // Receive data (0xFF is dummy)
 a80:	8f ef       	ldi	r24, 0xFF	; 255
 a82:	0e 94 0f 05 	call	0xa1e	; 0xa1e <SPI_SendData>
 a86:	89 83       	std	Y+1, r24	; 0x01

			    if (receivedData == '1') {
 a88:	89 81       	ldd	r24, Y+1	; 0x01
 a8a:	81 33       	cpi	r24, 0x31	; 49
 a8c:	21 f4       	brne	.+8      	; 0xa96 <main+0x4c>
			        SPI_SendData('1');  // Forward '1'
 a8e:	81 e3       	ldi	r24, 0x31	; 49
 a90:	0e 94 0f 05 	call	0xa1e	; 0xa1e <SPI_SendData>
 a94:	f5 cf       	rjmp	.-22     	; 0xa80 <main+0x36>
			    } else if (receivedData == '0') {
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	80 33       	cpi	r24, 0x30	; 48
 a9a:	91 f7       	brne	.-28     	; 0xa80 <main+0x36>
			        SPI_SendData('0');  // Forward '0'
 a9c:	80 e3       	ldi	r24, 0x30	; 48
 a9e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <SPI_SendData>
 aa2:	ee cf       	rjmp	.-36     	; 0xa80 <main+0x36>

00000aa4 <_exit>:
 aa4:	f8 94       	cli

00000aa6 <__stop_program>:
 aa6:	ff cf       	rjmp	.-2      	; 0xaa6 <__stop_program>
