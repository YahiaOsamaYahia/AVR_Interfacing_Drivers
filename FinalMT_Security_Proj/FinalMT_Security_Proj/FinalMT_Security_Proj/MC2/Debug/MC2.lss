
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000025e2  00002676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800176  00800176  0000278c  2**0
                  ALLOC
  3 .stab         00002628  00000000  00000000  0000278c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000135d  00000000  00000000  00004db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006111  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000062b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000064a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000088ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000adfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b2af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <main>
      8a:	0c 94 ef 12 	jmp	0x25de	; 0x25de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e0 12 	jmp	0x25c0	; 0x25c0 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <Buzzer_init>:

#include "Buzzer.h"
#include "GPIO.h"

void Buzzer_init(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	67 e0       	ldi	r22, 0x07	; 7
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <Buzzer_on>:


void Buzzer_on(void)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_HIGH);
     e22:	83 e0       	ldi	r24, 0x03	; 3
     e24:	67 e0       	ldi	r22, 0x07	; 7
     e26:	41 e0       	ldi	r20, 0x01	; 1
     e28:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>

}
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <Buzzer_off>:


void Buzzer_off(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTD_ID, PIN7_ID, LOGIC_LOW);
     e3a:	83 e0       	ldi	r24, 0x03	; 3
     e3c:	67 e0       	ldi	r22, 0x07	; 7
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <DcMotor_Init>:

#include "gpio.h"
#include "PWM.h"
#include "DC_motor.h"
void DcMotor_Init(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(PORTB_ID, PIN0_ID,PIN_OUTPUT);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_setupPinDirection>
GPIO_setupPinDirection(PORTB_ID, PIN1_ID,PIN_OUTPUT);
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_setupPinDirection>
/* Motor Pins direction output */
GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
/* Motor is stop at the beginning */

}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <DcMotor_Rotate+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start((uint8)((float32)(speed*255)/100));
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	48 2f       	mov	r20, r24
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	ca 01       	movw	r24, r20
     e96:	9c 01       	movw	r18, r24
     e98:	22 0f       	add	r18, r18
     e9a:	33 1f       	adc	r19, r19
     e9c:	c9 01       	movw	r24, r18
     e9e:	96 95       	lsr	r25
     ea0:	98 2f       	mov	r25, r24
     ea2:	88 27       	eor	r24, r24
     ea4:	97 95       	ror	r25
     ea6:	87 95       	ror	r24
     ea8:	82 1b       	sub	r24, r18
     eaa:	93 0b       	sbc	r25, r19
     eac:	84 0f       	add	r24, r20
     eae:	95 1f       	adc	r25, r21
     eb0:	aa 27       	eor	r26, r26
     eb2:	97 fd       	sbrc	r25, 7
     eb4:	a0 95       	com	r26
     eb6:	ba 2f       	mov	r27, r26
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	48 ec       	ldi	r20, 0xC8	; 200
     ece:	52 e4       	ldi	r21, 0x42	; 66
     ed0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <PWM_Timer0_Start>

	if(state == CW)
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	88 23       	and	r24, r24
     eec:	59 f4       	brne	.+22     	; 0xf04 <DcMotor_Rotate+0x84>
{
	/* Motor rotate clockwise*/
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
     f02:	1b c0       	rjmp	.+54     	; 0xf3a <DcMotor_Rotate+0xba>
}

	else if(state == A_CW)
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	59 f4       	brne	.+22     	; 0xf20 <DcMotor_Rotate+0xa0>
	{
		/* Motor rotate counter clockwise*/
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <DcMotor_Rotate+0xba>
	}

	else if(state == STOP)
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	51 f4       	brne	.+20     	; 0xf3a <DcMotor_Rotate+0xba>
	{
		GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
		GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	0e 94 8d 08 	call	0x111a	; 0x111a <GPIO_writePin>
	}


}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection (uint8 port_num , uint8 pin_num , GPIO_PinDirectionType direction)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <GPIO_setupPinDirection+0x6>
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <GPIO_setupPinDirection+0x8>
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	6a 83       	std	Y+2, r22	; 0x02
     f56:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORTS))
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <GPIO_setupPinDirection+0x1c>
     f5e:	d5 c0       	rjmp	.+426    	; 0x110a <GPIO_setupPinDirection+0x1c6>
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 30       	cpi	r24, 0x08	; 8
     f64:	08 f0       	brcs	.+2      	; 0xf68 <GPIO_setupPinDirection+0x24>
     f66:	d1 c0       	rjmp	.+418    	; 0x110a <GPIO_setupPinDirection+0x1c6>
		/* do nothing */
	}
	else
	{
		/* set up the pin direction as required */
		switch(pin_num)
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	3d 83       	std	Y+5, r19	; 0x05
     f70:	2c 83       	std	Y+4, r18	; 0x04
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	91 05       	cpc	r25, r1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <GPIO_setupPinDirection+0x3a>
     f7c:	43 c0       	rjmp	.+134    	; 0x1004 <GPIO_setupPinDirection+0xc0>
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	2c f4       	brge	.+10     	; 0xf92 <GPIO_setupPinDirection+0x4e>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	71 f0       	breq	.+28     	; 0xfac <GPIO_setupPinDirection+0x68>
     f90:	bc c0       	rjmp	.+376    	; 0x110a <GPIO_setupPinDirection+0x1c6>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	31 05       	cpc	r19, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <GPIO_setupPinDirection+0x5a>
     f9c:	5f c0       	rjmp	.+190    	; 0x105c <GPIO_setupPinDirection+0x118>
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	83 30       	cpi	r24, 0x03	; 3
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <GPIO_setupPinDirection+0x66>
     fa8:	85 c0       	rjmp	.+266    	; 0x10b4 <GPIO_setupPinDirection+0x170>
     faa:	af c0       	rjmp	.+350    	; 0x110a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_INPUT)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	88 23       	and	r24, r24
     fb0:	a9 f4       	brne	.+42     	; 0xfdc <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
     fb2:	aa e3       	ldi	r26, 0x3A	; 58
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e3       	ldi	r30, 0x3A	; 58
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_setupPinDirection+0x8c>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_setupPinDirection+0x88>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	97 c0       	rjmp	.+302    	; 0x110a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
     fdc:	aa e3       	ldi	r26, 0x3A	; 58
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ea e3       	ldi	r30, 0x3A	; 58
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_setupPinDirection+0xb6>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_setupPinDirection+0xb2>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	83 c0       	rjmp	.+262    	; 0x110a <GPIO_setupPinDirection+0x1c6>
			}
			break;

		case PORTB_ID:
			if (direction == PIN_INPUT)
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 23       	and	r24, r24
    1008:	a9 f4       	brne	.+42     	; 0x1034 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
    100a:	a7 e3       	ldi	r26, 0x37	; 55
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e7 e3       	ldi	r30, 0x37	; 55
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_setupPinDirection+0xe4>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_setupPinDirection+0xe0>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	6b c0       	rjmp	.+214    	; 0x110a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
    1034:	a7 e3       	ldi	r26, 0x37	; 55
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e3       	ldi	r30, 0x37	; 55
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_setupPinDirection+0x10e>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_setupPinDirection+0x10a>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	57 c0       	rjmp	.+174    	; 0x110a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_INPUT)
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 23       	and	r24, r24
    1060:	a9 f4       	brne	.+42     	; 0x108c <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
    1062:	a4 e3       	ldi	r26, 0x34	; 52
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e4 e3       	ldi	r30, 0x34	; 52
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_setupPinDirection+0x13c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_setupPinDirection+0x138>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	3f c0       	rjmp	.+126    	; 0x110a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    108c:	a4 e3       	ldi	r26, 0x34	; 52
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <GPIO_setupPinDirection+0x166>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <GPIO_setupPinDirection+0x162>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	2b c0       	rjmp	.+86     	; 0x110a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_INPUT)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 23       	and	r24, r24
    10b8:	a9 f4       	brne	.+42     	; 0x10e4 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
    10ba:	a1 e3       	ldi	r26, 0x31	; 49
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e1 e3       	ldi	r30, 0x31	; 49
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_setupPinDirection+0x194>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_setupPinDirection+0x190>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
    10e4:	a1 e3       	ldi	r26, 0x31	; 49
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e1 e3       	ldi	r30, 0x31	; 49
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_setupPinDirection+0x1be>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_setupPinDirection+0x1ba>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
			break;

		}
	}

}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_writePin+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <GPIO_writePin+0x8>
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	6a 83       	std	Y+2, r22	; 0x02
    112c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORTS))
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	08 f0       	brcs	.+2      	; 0x1136 <GPIO_writePin+0x1c>
    1134:	d5 c0       	rjmp	.+426    	; 0x12e0 <GPIO_writePin+0x1c6>
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	08 f0       	brcs	.+2      	; 0x113e <GPIO_writePin+0x24>
    113c:	d1 c0       	rjmp	.+418    	; 0x12e0 <GPIO_writePin+0x1c6>
	{
		/* do nothing */
	}
	else
	{
		switch(port_num)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3d 83       	std	Y+5, r19	; 0x05
    1146:	2c 83       	std	Y+4, r18	; 0x04
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <GPIO_writePin+0x3a>
    1152:	43 c0       	rjmp	.+134    	; 0x11da <GPIO_writePin+0xc0>
    1154:	2c 81       	ldd	r18, Y+4	; 0x04
    1156:	3d 81       	ldd	r19, Y+5	; 0x05
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <GPIO_writePin+0x4e>
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	71 f0       	breq	.+28     	; 0x1182 <GPIO_writePin+0x68>
    1166:	bc c0       	rjmp	.+376    	; 0x12e0 <GPIO_writePin+0x1c6>
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	3d 81       	ldd	r19, Y+5	; 0x05
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <GPIO_writePin+0x5a>
    1172:	5f c0       	rjmp	.+190    	; 0x1232 <GPIO_writePin+0x118>
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	91 05       	cpc	r25, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <GPIO_writePin+0x66>
    117e:	85 c0       	rjmp	.+266    	; 0x128a <GPIO_writePin+0x170>
    1180:	af c0       	rjmp	.+350    	; 0x12e0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_LOW)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	88 23       	and	r24, r24
    1186:	a9 f4       	brne	.+42     	; 0x11b2 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
    1188:	ab e3       	ldi	r26, 0x3B	; 59
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	eb e3       	ldi	r30, 0x3B	; 59
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_writePin+0x8c>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_writePin+0x88>
    11aa:	80 95       	com	r24
    11ac:	84 23       	and	r24, r20
    11ae:	8c 93       	st	X, r24
    11b0:	97 c0       	rjmp	.+302    	; 0x12e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
    11b2:	ab e3       	ldi	r26, 0x3B	; 59
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	eb e3       	ldi	r30, 0x3B	; 59
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 2e       	mov	r0, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <GPIO_writePin+0xb6>
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	0a 94       	dec	r0
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <GPIO_writePin+0xb2>
    11d4:	84 2b       	or	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	83 c0       	rjmp	.+262    	; 0x12e0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW)
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 23       	and	r24, r24
    11de:	a9 f4       	brne	.+42     	; 0x120a <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    11e0:	a8 e3       	ldi	r26, 0x38	; 56
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e8 e3       	ldi	r30, 0x38	; 56
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_writePin+0xe4>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <GPIO_writePin+0xe0>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	6b c0       	rjmp	.+214    	; 0x12e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GPIO_writePin+0x10e>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <GPIO_writePin+0x10a>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	57 c0       	rjmp	.+174    	; 0x12e0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW)
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	88 23       	and	r24, r24
    1236:	a9 f4       	brne	.+42     	; 0x1262 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
    1238:	a5 e3       	ldi	r26, 0x35	; 53
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e3       	ldi	r30, 0x35	; 53
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_writePin+0x13c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_writePin+0x138>
    125a:	80 95       	com	r24
    125c:	84 23       	and	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
    1262:	a5 e3       	ldi	r26, 0x35	; 53
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e5 e3       	ldi	r30, 0x35	; 53
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <GPIO_writePin+0x166>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <GPIO_writePin+0x162>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	2b c0       	rjmp	.+86     	; 0x12e0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW)
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 23       	and	r24, r24
    128e:	a9 f4       	brne	.+42     	; 0x12ba <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
    1290:	a2 e3       	ldi	r26, 0x32	; 50
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e2 e3       	ldi	r30, 0x32	; 50
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_writePin+0x194>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_writePin+0x190>
    12b2:	80 95       	com	r24
    12b4:	84 23       	and	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	13 c0       	rjmp	.+38     	; 0x12e0 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
    12ba:	a2 e3       	ldi	r26, 0x32	; 50
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_writePin+0x1be>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_writePin+0x1ba>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <GPIO_readPin+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <GPIO_readPin+0x8>
    12f8:	0f 92       	push	r0
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	8a 83       	std	Y+2, r24	; 0x02
    1300:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1302:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORTS))
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	08 f0       	brcs	.+2      	; 0x130c <GPIO_readPin+0x1c>
    130a:	84 c0       	rjmp	.+264    	; 0x1414 <GPIO_readPin+0x124>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	88 30       	cpi	r24, 0x08	; 8
    1310:	08 f0       	brcs	.+2      	; 0x1314 <GPIO_readPin+0x24>
    1312:	80 c0       	rjmp	.+256    	; 0x1414 <GPIO_readPin+0x124>
		/* do nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3d 83       	std	Y+5, r19	; 0x05
    131c:	2c 83       	std	Y+4, r18	; 0x04
    131e:	4c 81       	ldd	r20, Y+4	; 0x04
    1320:	5d 81       	ldd	r21, Y+5	; 0x05
    1322:	41 30       	cpi	r20, 0x01	; 1
    1324:	51 05       	cpc	r21, r1
    1326:	79 f1       	breq	.+94     	; 0x1386 <GPIO_readPin+0x96>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	91 05       	cpc	r25, r1
    1330:	34 f4       	brge	.+12     	; 0x133e <GPIO_readPin+0x4e>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	21 15       	cp	r18, r1
    1338:	31 05       	cpc	r19, r1
    133a:	69 f0       	breq	.+26     	; 0x1356 <GPIO_readPin+0x66>
    133c:	6b c0       	rjmp	.+214    	; 0x1414 <GPIO_readPin+0x124>
    133e:	4c 81       	ldd	r20, Y+4	; 0x04
    1340:	5d 81       	ldd	r21, Y+5	; 0x05
    1342:	42 30       	cpi	r20, 0x02	; 2
    1344:	51 05       	cpc	r21, r1
    1346:	b9 f1       	breq	.+110    	; 0x13b6 <GPIO_readPin+0xc6>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <GPIO_readPin+0x64>
    1352:	49 c0       	rjmp	.+146    	; 0x13e6 <GPIO_readPin+0xf6>
    1354:	5f c0       	rjmp	.+190    	; 0x1414 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_CLEAR(PORTA,pin_num))
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	a9 01       	movw	r20, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_readPin+0x7e>
    136a:	55 95       	asr	r21
    136c:	47 95       	ror	r20
    136e:	8a 95       	dec	r24
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_readPin+0x7a>
    1372:	ca 01       	movw	r24, r20
    1374:	81 70       	andi	r24, 0x01	; 1
    1376:	90 70       	andi	r25, 0x00	; 0
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	11 f4       	brne	.+4      	; 0x1380 <GPIO_readPin+0x90>
			{
				pin_value = LOGIC_LOW;
    137c:	19 82       	std	Y+1, r1	; 0x01
    137e:	4a c0       	rjmp	.+148    	; 0x1414 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_HIGH;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	47 c0       	rjmp	.+142    	; 0x1414 <GPIO_readPin+0x124>
			}
			break;

		case PORTB_ID:
			if (BIT_IS_CLEAR(PORTB,pin_num))
    1386:	e8 e3       	ldi	r30, 0x38	; 56
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <GPIO_readPin+0xae>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <GPIO_readPin+0xaa>
    13a2:	ca 01       	movw	r24, r20
    13a4:	81 70       	andi	r24, 0x01	; 1
    13a6:	90 70       	andi	r25, 0x00	; 0
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <GPIO_readPin+0xc0>
			{
				pin_value = LOGIC_LOW;
    13ac:	19 82       	std	Y+1, r1	; 0x01
    13ae:	32 c0       	rjmp	.+100    	; 0x1414 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_HIGH;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	2f c0       	rjmp	.+94     	; 0x1414 <GPIO_readPin+0x124>
			}
			break;

		case PORTC_ID:
			if (BIT_IS_CLEAR(PORTC,pin_num))
    13b6:	e5 e3       	ldi	r30, 0x35	; 53
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a9 01       	movw	r20, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <GPIO_readPin+0xde>
    13ca:	55 95       	asr	r21
    13cc:	47 95       	ror	r20
    13ce:	8a 95       	dec	r24
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <GPIO_readPin+0xda>
    13d2:	ca 01       	movw	r24, r20
    13d4:	81 70       	andi	r24, 0x01	; 1
    13d6:	90 70       	andi	r25, 0x00	; 0
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	11 f4       	brne	.+4      	; 0x13e0 <GPIO_readPin+0xf0>
			{
				pin_value = LOGIC_LOW;
    13dc:	19 82       	std	Y+1, r1	; 0x01
    13de:	1a c0       	rjmp	.+52     	; 0x1414 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_HIGH;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	17 c0       	rjmp	.+46     	; 0x1414 <GPIO_readPin+0x124>
			}
			break;

		case PORTD_ID:
			if (BIT_IS_CLEAR(PORTD,pin_num))
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <GPIO_readPin+0x10e>
    13fa:	55 95       	asr	r21
    13fc:	47 95       	ror	r20
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <GPIO_readPin+0x10a>
    1402:	ca 01       	movw	r24, r20
    1404:	81 70       	andi	r24, 0x01	; 1
    1406:	90 70       	andi	r25, 0x00	; 0
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	11 f4       	brne	.+4      	; 0x1410 <GPIO_readPin+0x120>
			{
				pin_value = LOGIC_LOW;
    140c:	19 82       	std	Y+1, r1	; 0x01
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_HIGH;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1414:	89 81       	ldd	r24, Y+1	; 0x01
}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection (uint8 port_num , GPIO_PortDirectionType direction)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <GPIO_setupPortDirection+0x6>
    142c:	00 d0       	rcall	.+0      	; 0x142e <GPIO_setupPortDirection+0x8>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if (port_num >= NUM_OF_PORTS)
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	90 f5       	brcc	.+100    	; 0x14a0 <GPIO_setupPortDirection+0x7a>
		/* do nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3c 83       	std	Y+4, r19	; 0x04
    1444:	2b 83       	std	Y+3, r18	; 0x03
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	d1 f0       	breq	.+52     	; 0x1484 <GPIO_setupPortDirection+0x5e>
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <GPIO_setupPortDirection+0x3e>
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <GPIO_setupPortDirection+0x54>
    1462:	1e c0       	rjmp	.+60     	; 0x14a0 <GPIO_setupPortDirection+0x7a>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	81 f0       	breq	.+32     	; 0x148e <GPIO_setupPortDirection+0x68>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	81 f0       	breq	.+32     	; 0x1498 <GPIO_setupPortDirection+0x72>
    1478:	13 c0       	rjmp	.+38     	; 0x14a0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    147a:	ea e3       	ldi	r30, 0x3A	; 58
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
    1482:	0e c0       	rjmp	.+28     	; 0x14a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1484:	e7 e3       	ldi	r30, 0x37	; 55
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	80 83       	st	Z, r24
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    148e:	e4 e3       	ldi	r30, 0x34	; 52
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	80 83       	st	Z, r24
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1498:	e1 e3       	ldi	r30, 0x31	; 49
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	80 83       	st	Z, r24
			break;
		}
	}
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <GPIO_writePort+0x6>
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <GPIO_writePort+0x8>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if (port_num >= NUM_OF_PORTS)
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	90 f5       	brcc	.+100    	; 0x1528 <GPIO_writePort+0x7a>
		/* do nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3c 83       	std	Y+4, r19	; 0x04
    14cc:	2b 83       	std	Y+3, r18	; 0x03
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	d1 f0       	breq	.+52     	; 0x150c <GPIO_writePort+0x5e>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	2c f4       	brge	.+10     	; 0x14ec <GPIO_writePort+0x3e>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	61 f0       	breq	.+24     	; 0x1502 <GPIO_writePort+0x54>
    14ea:	1e c0       	rjmp	.+60     	; 0x1528 <GPIO_writePort+0x7a>
    14ec:	2b 81       	ldd	r18, Y+3	; 0x03
    14ee:	3c 81       	ldd	r19, Y+4	; 0x04
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <GPIO_writePort+0x68>
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	81 f0       	breq	.+32     	; 0x1520 <GPIO_writePort+0x72>
    1500:	13 c0       	rjmp	.+38     	; 0x1528 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1502:	eb e3       	ldi	r30, 0x3B	; 59
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	0e c0       	rjmp	.+28     	; 0x1528 <GPIO_writePort+0x7a>
			break;

		case PORTB_ID:
			PORTB = value;
    150c:	e8 e3       	ldi	r30, 0x38	; 56
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <GPIO_writePort+0x7a>
			break;

		case PORTC_ID:
			PORTC = value;
    1516:	e5 e3       	ldi	r30, 0x35	; 53
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <GPIO_writePort+0x7a>
			break;

		case PORTD_ID:
			PORTD = value;
    1520:	e2 e3       	ldi	r30, 0x32	; 50
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	80 83       	st	Z, r24
			break;
		}
	}
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <GPIO_readPort+0x6>
    153c:	00 d0       	rcall	.+0      	; 0x153e <GPIO_readPort+0x8>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <GPIO_readPort+0xa>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1546:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if (port_num >= NUM_OF_PORTS)
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	98 f5       	brcc	.+102    	; 0x15b4 <GPIO_readPort+0x7e>
		/* do nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3d 83       	std	Y+5, r19	; 0x05
    1556:	2c 83       	std	Y+4, r18	; 0x04
    1558:	8c 81       	ldd	r24, Y+4	; 0x04
    155a:	9d 81       	ldd	r25, Y+5	; 0x05
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	d1 f0       	breq	.+52     	; 0x1596 <GPIO_readPort+0x60>
    1562:	2c 81       	ldd	r18, Y+4	; 0x04
    1564:	3d 81       	ldd	r19, Y+5	; 0x05
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	2c f4       	brge	.+10     	; 0x1576 <GPIO_readPort+0x40>
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	61 f0       	breq	.+24     	; 0x158c <GPIO_readPort+0x56>
    1574:	1f c0       	rjmp	.+62     	; 0x15b4 <GPIO_readPort+0x7e>
    1576:	2c 81       	ldd	r18, Y+4	; 0x04
    1578:	3d 81       	ldd	r19, Y+5	; 0x05
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	81 f0       	breq	.+32     	; 0x15a0 <GPIO_readPort+0x6a>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	81 f0       	breq	.+32     	; 0x15aa <GPIO_readPort+0x74>
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PORTA;
    158c:	eb e3       	ldi	r30, 0x3B	; 59
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	90 81       	ld	r25, Z
    1592:	9b 83       	std	Y+3, r25	; 0x03
    1594:	10 c0       	rjmp	.+32     	; 0x15b6 <GPIO_readPort+0x80>
			break;

		case PORTB_ID:
			return PORTB;
    1596:	e8 e3       	ldi	r30, 0x38	; 56
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	20 81       	ld	r18, Z
    159c:	2b 83       	std	Y+3, r18	; 0x03
    159e:	0b c0       	rjmp	.+22     	; 0x15b6 <GPIO_readPort+0x80>
			break;

		case PORTC_ID:
			return PORTC;
    15a0:	e5 e3       	ldi	r30, 0x35	; 53
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	30 81       	ld	r19, Z
    15a6:	3b 83       	std	Y+3, r19	; 0x03
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <GPIO_readPort+0x80>
			break;

		case PORTD_ID:
			return PORTD;
    15aa:	e2 e3       	ldi	r30, 0x32	; 50
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	8b 83       	std	Y+3, r24	; 0x03
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <GPIO_readPort+0x80>
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_readPort+0x84>
			break;
		}
	}
}
    15b6:	9b 81       	ldd	r25, Y+3	; 0x03
    15b8:	9e 83       	std	Y+6, r25	; 0x06
    15ba:	8e 81       	ldd	r24, Y+6	; 0x06
    15bc:	26 96       	adiw	r28, 0x06	; 6
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <PWM_Timer0_Start>:
#include "gpio.h"
#include <avr/io.h>


void PWM_Timer0_Start(uint8 duty_cycle)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	0f 92       	push	r0
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
	/* configure the timer registers:
	 * 1-operate on fast PWM mode
	 * 2-prescaler with F_CPU/8.
	 * 3-the PWM mode with Non-Inverting
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    15da:	e3 e5       	ldi	r30, 0x53	; 83
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8a e6       	ldi	r24, 0x6A	; 106
    15e0:	80 83       	st	Z, r24

	/* Configure PB3/OC0 as output pin */
	GPIO_setupPinDirection(PORTD_ID, PIN7_ID , PIN_OUTPUT);
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	67 e0       	ldi	r22, 0x07	; 7
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	0e 94 a2 07 	call	0xf44	; 0xf44 <GPIO_setupPinDirection>

	 /* initial value for the timer */
	TCNT0=0;
    15ec:	e2 e5       	ldi	r30, 0x52	; 82
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	10 82       	st	Z, r1

	/* set compare value */
	OCR0= (uint8)((255*duty_cycle)/100);
    15f2:	ec e5       	ldi	r30, 0x5C	; 92
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	48 2f       	mov	r20, r24
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	ca 01       	movw	r24, r20
    15fe:	9c 01       	movw	r18, r24
    1600:	22 0f       	add	r18, r18
    1602:	33 1f       	adc	r19, r19
    1604:	c9 01       	movw	r24, r18
    1606:	96 95       	lsr	r25
    1608:	98 2f       	mov	r25, r24
    160a:	88 27       	eor	r24, r24
    160c:	97 95       	ror	r25
    160e:	87 95       	ror	r24
    1610:	82 1b       	sub	r24, r18
    1612:	93 0b       	sbc	r25, r19
    1614:	84 0f       	add	r24, r20
    1616:	95 1f       	adc	r25, r21
    1618:	24 e6       	ldi	r18, 0x64	; 100
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	b9 01       	movw	r22, r18
    161e:	0e 94 6f 12 	call	0x24de	; 0x24de <__divmodhi4>
    1622:	cb 01       	movw	r24, r22
    1624:	80 83       	st	Z, r24

}
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <__vector_7>:
************************************************************************************/


/* If Compare Mode is used, ISR handles the callback*/
ISR(TIMER1_COMPA_vect)
{
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	2f 93       	push	r18
    163a:	3f 93       	push	r19
    163c:	4f 93       	push	r20
    163e:	5f 93       	push	r21
    1640:	6f 93       	push	r22
    1642:	7f 93       	push	r23
    1644:	8f 93       	push	r24
    1646:	9f 93       	push	r25
    1648:	af 93       	push	r26
    164a:	bf 93       	push	r27
    164c:	ef 93       	push	r30
    164e:	ff 93       	push	r31
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1658:	80 91 76 01 	lds	r24, 0x0176
    165c:	90 91 77 01 	lds	r25, 0x0177
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	29 f0       	breq	.+10     	; 0x166e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1664:	e0 91 76 01 	lds	r30, 0x0176
    1668:	f0 91 77 01 	lds	r31, 0x0177
    166c:	09 95       	icall
	}
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_9>:


/* If Overflow Mode is used, ISR handles the callback*/
ISR(TIMER1_OVF_vect)
{
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    16be:	80 91 76 01 	lds	r24, 0x0176
    16c2:	90 91 77 01 	lds	r25, 0x0177
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    16ca:	e0 91 76 01 	lds	r30, 0x0176
    16ce:	f0 91 77 01 	lds	r31, 0x0177
    16d2:	09 95       	icall
	}
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <Timer1_init>:


void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <Timer1_init+0x6>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	89 83       	std	Y+1, r24	; 0x01
	/* FOC1A , FOC1B are active as we use a non-PWM mode*/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1708:	ef e4       	ldi	r30, 0x4F	; 79
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8c e0       	ldi	r24, 0x0C	; 12
    170e:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler & (0x07));
    1710:	ae e4       	ldi	r26, 0x4E	; 78
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	ee e4       	ldi	r30, 0x4E	; 78
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	98 2f       	mov	r25, r24
    171c:	98 7f       	andi	r25, 0xF8	; 248
    171e:	e9 81       	ldd	r30, Y+1	; 0x01
    1720:	fa 81       	ldd	r31, Y+2	; 0x02
    1722:	85 81       	ldd	r24, Z+5	; 0x05
    1724:	87 70       	andi	r24, 0x07	; 7
    1726:	89 2b       	or	r24, r25
    1728:	8c 93       	st	X, r24
	TCCR1B |= ((Config_Ptr->mode)>>2)<<3;
    172a:	ae e4       	ldi	r26, 0x4E	; 78
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ee e4       	ldi	r30, 0x4E	; 78
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	28 2f       	mov	r18, r24
    1736:	e9 81       	ldd	r30, Y+1	; 0x01
    1738:	fa 81       	ldd	r31, Y+2	; 0x02
    173a:	80 81       	ld	r24, Z
    173c:	86 95       	lsr	r24
    173e:	86 95       	lsr	r24
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	82 2b       	or	r24, r18
    1752:	8c 93       	st	X, r24
	TCCR1A |= ((Config_Ptr->mode)&(0x03));
    1754:	af e4       	ldi	r26, 0x4F	; 79
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	ef e4       	ldi	r30, 0x4F	; 79
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	98 2f       	mov	r25, r24
    1760:	e9 81       	ldd	r30, Y+1	; 0x01
    1762:	fa 81       	ldd	r31, Y+2	; 0x02
    1764:	80 81       	ld	r24, Z
    1766:	83 70       	andi	r24, 0x03	; 3
    1768:	89 2b       	or	r24, r25
    176a:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    176c:	ac e4       	ldi	r26, 0x4C	; 76
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e9 81       	ldd	r30, Y+1	; 0x01
    1772:	fa 81       	ldd	r31, Y+2	; 0x02
    1774:	81 81       	ldd	r24, Z+1	; 0x01
    1776:	92 81       	ldd	r25, Z+2	; 0x02
    1778:	11 96       	adiw	r26, 0x01	; 1
    177a:	9c 93       	st	X, r25
    177c:	8e 93       	st	-X, r24

	if( Config_Ptr-> mode == compare)
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	80 81       	ld	r24, Z
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	71 f4       	brne	.+28     	; 0x17a4 <Timer1_init+0xaa>
	{
		OCR1A = Config_Ptr->compare_value;
    1788:	aa e4       	ldi	r26, 0x4A	; 74
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e9 81       	ldd	r30, Y+1	; 0x01
    178e:	fa 81       	ldd	r31, Y+2	; 0x02
    1790:	83 81       	ldd	r24, Z+3	; 0x03
    1792:	94 81       	ldd	r25, Z+4	; 0x04
    1794:	11 96       	adiw	r26, 0x01	; 1
    1796:	9c 93       	st	X, r25
    1798:	8e 93       	st	-X, r24
		TIMSK = (1<< OCIE1A);
    179a:	e9 e5       	ldi	r30, 0x59	; 89
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 e1       	ldi	r24, 0x10	; 16
    17a0:	80 83       	st	Z, r24
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <Timer1_init+0xbc>
	}
	else if(Config_Ptr-> mode == normal)
    17a4:	e9 81       	ldd	r30, Y+1	; 0x01
    17a6:	fa 81       	ldd	r31, Y+2	; 0x02
    17a8:	80 81       	ld	r24, Z
    17aa:	88 23       	and	r24, r24
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <Timer1_init+0xbc>
	{
		TIMSK = (1<< TOIE1);
    17ae:	e9 e5       	ldi	r30, 0x59	; 89
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	80 83       	st	Z, r24
	}

}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <Timer1_deInit>:
void Timer1_deInit(void)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	/* clear all TIMER1 registers */
	TIMSK = 0;
    17c8:	e9 e5       	ldi	r30, 0x59	; 89
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	10 82       	st	Z, r1
	TCNT1 = 0;
    17ce:	ec e4       	ldi	r30, 0x4C	; 76
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	11 82       	std	Z+1, r1	; 0x01
    17d4:	10 82       	st	Z, r1
	TCCR1A = 0;
    17d6:	ef e4       	ldi	r30, 0x4F	; 79
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	10 82       	st	Z, r1
	TCCR1B = 0;
    17dc:	ee e4       	ldi	r30, 0x4E	; 78
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	10 82       	st	Z, r1
	OCR1A = 0;
    17e2:	ea e4       	ldi	r30, 0x4A	; 74
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	11 82       	std	Z+1, r1	; 0x01
    17e8:	10 82       	st	Z, r1
}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <Timer1_setCallBack+0x6>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	90 93 77 01 	sts	0x0177, r25
    1806:	80 93 76 01 	sts	0x0176, r24
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	00 d0       	rcall	.+0      	; 0x181a <EEPROM_writeByte+0x6>
    181a:	00 d0       	rcall	.+0      	; 0x181c <EEPROM_writeByte+0x8>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	9a 83       	std	Y+2, r25	; 0x02
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1826:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    182a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    182e:	88 30       	cpi	r24, 0x08	; 8
    1830:	11 f0       	breq	.+4      	; 0x1836 <EEPROM_writeByte+0x22>
        return ERROR;
    1832:	1c 82       	std	Y+4, r1	; 0x04
    1834:	28 c0       	rjmp	.+80     	; 0x1886 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	80 70       	andi	r24, 0x00	; 0
    183c:	97 70       	andi	r25, 0x07	; 7
    183e:	88 0f       	add	r24, r24
    1840:	89 2f       	mov	r24, r25
    1842:	88 1f       	adc	r24, r24
    1844:	99 0b       	sbc	r25, r25
    1846:	91 95       	neg	r25
    1848:	80 6a       	ori	r24, 0xA0	; 160
    184a:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    184e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    1852:	88 31       	cpi	r24, 0x18	; 24
    1854:	11 f0       	breq	.+4      	; 0x185a <EEPROM_writeByte+0x46>
        return ERROR; 
    1856:	1c 82       	std	Y+4, r1	; 0x04
    1858:	16 c0       	rjmp	.+44     	; 0x1886 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1860:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    1864:	88 32       	cpi	r24, 0x28	; 40
    1866:	11 f0       	breq	.+4      	; 0x186c <EEPROM_writeByte+0x58>
        return ERROR;
    1868:	1c 82       	std	Y+4, r1	; 0x04
    186a:	0d c0       	rjmp	.+26     	; 0x1886 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1872:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    1876:	88 32       	cpi	r24, 0x28	; 40
    1878:	11 f0       	breq	.+4      	; 0x187e <EEPROM_writeByte+0x6a>
        return ERROR;
    187a:	1c 82       	std	Y+4, r1	; 0x04
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    187e:	0e 94 0c 11 	call	0x2218	; 0x2218 <TWI_stop>
	
    return SUCCESS;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	8c 83       	std	Y+4, r24	; 0x04
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <EEPROM_readByte+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <EEPROM_readByte+0x8>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	7c 83       	std	Y+4, r23	; 0x04
    18aa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18ac:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    18b0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    18b4:	88 30       	cpi	r24, 0x08	; 8
    18b6:	11 f0       	breq	.+4      	; 0x18bc <EEPROM_readByte+0x26>
        return ERROR;
    18b8:	1d 82       	std	Y+5, r1	; 0x05
    18ba:	44 c0       	rjmp	.+136    	; 0x1944 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	80 70       	andi	r24, 0x00	; 0
    18c2:	97 70       	andi	r25, 0x07	; 7
    18c4:	88 0f       	add	r24, r24
    18c6:	89 2f       	mov	r24, r25
    18c8:	88 1f       	adc	r24, r24
    18ca:	99 0b       	sbc	r25, r25
    18cc:	91 95       	neg	r25
    18ce:	80 6a       	ori	r24, 0xA0	; 160
    18d0:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18d4:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    18d8:	88 31       	cpi	r24, 0x18	; 24
    18da:	11 f0       	breq	.+4      	; 0x18e0 <EEPROM_readByte+0x4a>
        return ERROR;
    18dc:	1d 82       	std	Y+5, r1	; 0x05
    18de:	32 c0       	rjmp	.+100    	; 0x1944 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18e6:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    18ea:	88 32       	cpi	r24, 0x28	; 40
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <EEPROM_readByte+0x5c>
        return ERROR;
    18ee:	1d 82       	std	Y+5, r1	; 0x05
    18f0:	29 c0       	rjmp	.+82     	; 0x1944 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    18f2:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    18f6:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    18fa:	80 31       	cpi	r24, 0x10	; 16
    18fc:	11 f0       	breq	.+4      	; 0x1902 <EEPROM_readByte+0x6c>
        return ERROR;
    18fe:	1d 82       	std	Y+5, r1	; 0x05
    1900:	21 c0       	rjmp	.+66     	; 0x1944 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	80 70       	andi	r24, 0x00	; 0
    1908:	97 70       	andi	r25, 0x07	; 7
    190a:	88 0f       	add	r24, r24
    190c:	89 2f       	mov	r24, r25
    190e:	88 1f       	adc	r24, r24
    1910:	99 0b       	sbc	r25, r25
    1912:	91 95       	neg	r25
    1914:	81 6a       	ori	r24, 0xA1	; 161
    1916:	0e 94 17 11 	call	0x222e	; 0x222e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    191a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    191e:	80 34       	cpi	r24, 0x40	; 64
    1920:	11 f0       	breq	.+4      	; 0x1926 <EEPROM_readByte+0x90>
        return ERROR;
    1922:	1d 82       	std	Y+5, r1	; 0x05
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1926:	0e 94 41 11 	call	0x2282	; 0x2282 <TWI_readByteWithNACK>
    192a:	eb 81       	ldd	r30, Y+3	; 0x03
    192c:	fc 81       	ldd	r31, Y+4	; 0x04
    192e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1930:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TWI_getStatus>
    1934:	88 35       	cpi	r24, 0x58	; 88
    1936:	11 f0       	breq	.+4      	; 0x193c <EEPROM_readByte+0xa6>
        return ERROR;
    1938:	1d 82       	std	Y+5, r1	; 0x05
    193a:	04 c0       	rjmp	.+8      	; 0x1944 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    193c:	0e 94 0c 11 	call	0x2218	; 0x2218 <TWI_stop>

    return SUCCESS;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <Timer1_Inc>:
 *                                   Function body                                                        *
 *********************************************************************************************************/
/*
 * Description : function to increment timer
 */
void Timer1_Inc(void){
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
    195e:	80 91 78 01 	lds	r24, 0x0178
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	80 93 78 01 	sts	0x0178, r24
}
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <Door_wait>:
/*
 * Description : function to perform wait operation
 */
void Door_wait(uint8 time){
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	89 83       	std	Y+1, r24	; 0x01
	g_sec=0;
    197a:	10 92 78 01 	sts	0x0178, r1
	if (g_sec < time){
		/* wait */
	}
}
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <Check_Password>:
/*
 * Description : function to check that the password in MC1 matches the password in MC2
 */
uint8 Check_Password(uint8* p1,uint8* p2){
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	00 d0       	rcall	.+0      	; 0x198c <Check_Password+0x6>
    198c:	00 d0       	rcall	.+0      	; 0x198e <Check_Password+0x8>
    198e:	00 d0       	rcall	.+0      	; 0x1990 <Check_Password+0xa>
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	9b 83       	std	Y+3, r25	; 0x03
    1996:	8a 83       	std	Y+2, r24	; 0x02
    1998:	7d 83       	std	Y+5, r23	; 0x05
    199a:	6c 83       	std	Y+4, r22	; 0x04
	/* return 0 in case of don't match */
    /* return 1 in case of matching */
	uint8 i=0;
    199c:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i < PASSWORD_SIZE ; i++){
    199e:	19 82       	std	Y+1, r1	; 0x01
    19a0:	1c c0       	rjmp	.+56     	; 0x19da <Check_Password+0x54>
		if(p1[i] != p2[i]){ /* the two passwords don't match */
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	9b 81       	ldd	r25, Y+3	; 0x03
    19ac:	fc 01       	movw	r30, r24
    19ae:	e2 0f       	add	r30, r18
    19b0:	f3 1f       	adc	r31, r19
    19b2:	40 81       	ld	r20, Z
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	9d 81       	ldd	r25, Y+5	; 0x05
    19be:	fc 01       	movw	r30, r24
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
    19c4:	80 81       	ld	r24, Z
    19c6:	48 17       	cp	r20, r24
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <Check_Password+0x4e>
			UART_sendByte(FALSE);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	0e 94 dd 11 	call	0x23ba	; 0x23ba <UART_sendByte>
			return 0;
    19d0:	1e 82       	std	Y+6, r1	; 0x06
    19d2:	0b c0       	rjmp	.+22     	; 0x19ea <Check_Password+0x64>
 */
uint8 Check_Password(uint8* p1,uint8* p2){
	/* return 0 in case of don't match */
    /* return 1 in case of matching */
	uint8 i=0;
	for(i=0 ; i < PASSWORD_SIZE ; i++){
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	8f 5f       	subi	r24, 0xFF	; 255
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	85 30       	cpi	r24, 0x05	; 5
    19de:	08 f3       	brcs	.-62     	; 0x19a2 <Check_Password+0x1c>
		if(p1[i] != p2[i]){ /* the two passwords don't match */
			UART_sendByte(FALSE);
			return 0;
		}
	}
	UART_sendByte(TRUE); /* the two passwords are matching */
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <UART_sendByte>
	return 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	8e 83       	std	Y+6, r24	; 0x06
    19ea:	8e 81       	ldd	r24, Y+6	; 0x06
}
    19ec:	26 96       	adiw	r28, 0x06	; 6
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <Save_Password>:
/*
 * Description : Function to save the password in EEPROM
 */
void Save_Password(const uint8* PW){
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	6b 97       	sbiw	r28, 0x1b	; 27
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	9b 8f       	std	Y+27, r25	; 0x1b
    1a14:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8 i=0;
    1a16:	19 8e       	std	Y+25, r1	; 0x19
	for(i=0 ; i < PASSWORD_SIZE ; i++){
    1a18:	19 8e       	std	Y+25, r1	; 0x19
    1a1a:	d4 c0       	rjmp	.+424    	; 0x1bc4 <Save_Password+0x1c6>
        EEPROM_writeByte(START_ADDRESS + i,PW[i]);
    1a1c:	89 8d       	ldd	r24, Y+25	; 0x19
    1a1e:	88 2f       	mov	r24, r24
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	8f 5e       	subi	r24, 0xEF	; 239
    1a24:	9c 4f       	sbci	r25, 0xFC	; 252
    1a26:	ac 01       	movw	r20, r24
    1a28:	89 8d       	ldd	r24, Y+25	; 0x19
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a30:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a32:	fc 01       	movw	r30, r24
    1a34:	e2 0f       	add	r30, r18
    1a36:	f3 1f       	adc	r31, r19
    1a38:	20 81       	ld	r18, Z
    1a3a:	ca 01       	movw	r24, r20
    1a3c:	62 2f       	mov	r22, r18
    1a3e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <EEPROM_writeByte>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	a0 e2       	ldi	r26, 0x20	; 32
    1a48:	b1 e4       	ldi	r27, 0x41	; 65
    1a4a:	8d 8b       	std	Y+21, r24	; 0x15
    1a4c:	9e 8b       	std	Y+22, r25	; 0x16
    1a4e:	af 8b       	std	Y+23, r26	; 0x17
    1a50:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a52:	6d 89       	ldd	r22, Y+21	; 0x15
    1a54:	7e 89       	ldd	r23, Y+22	; 0x16
    1a56:	8f 89       	ldd	r24, Y+23	; 0x17
    1a58:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5a:	2b ea       	ldi	r18, 0xAB	; 171
    1a5c:	3a ea       	ldi	r19, 0xAA	; 170
    1a5e:	4a e2       	ldi	r20, 0x2A	; 42
    1a60:	50 e4       	ldi	r21, 0x40	; 64
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	89 8b       	std	Y+17, r24	; 0x11
    1a6c:	9a 8b       	std	Y+18, r25	; 0x12
    1a6e:	ab 8b       	std	Y+19, r26	; 0x13
    1a70:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a72:	69 89       	ldd	r22, Y+17	; 0x11
    1a74:	7a 89       	ldd	r23, Y+18	; 0x12
    1a76:	8b 89       	ldd	r24, Y+19	; 0x13
    1a78:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	1c f4       	brge	.+6      	; 0x1a90 <Save_Password+0x92>
		__ticks = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	88 8b       	std	Y+16, r24	; 0x10
    1a8e:	91 c0       	rjmp	.+290    	; 0x1bb2 <Save_Password+0x1b4>
	else if (__tmp > 255)
    1a90:	69 89       	ldd	r22, Y+17	; 0x11
    1a92:	7a 89       	ldd	r23, Y+18	; 0x12
    1a94:	8b 89       	ldd	r24, Y+19	; 0x13
    1a96:	9c 89       	ldd	r25, Y+20	; 0x14
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	53 e4       	ldi	r21, 0x43	; 67
    1aa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	0c f0       	brlt	.+2      	; 0x1aaa <Save_Password+0xac>
    1aa8:	7b c0       	rjmp	.+246    	; 0x1ba0 <Save_Password+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    1aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1aac:	7e 89       	ldd	r23, Y+22	; 0x16
    1aae:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a e7       	ldi	r20, 0x7A	; 122
    1ab8:	54 e4       	ldi	r21, 0x44	; 68
    1aba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8c 87       	std	Y+12, r24	; 0x0c
    1ac4:	9d 87       	std	Y+13, r25	; 0x0d
    1ac6:	ae 87       	std	Y+14, r26	; 0x0e
    1ac8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	6c 85       	ldd	r22, Y+12	; 0x0c
    1acc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ace:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ad0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a ef       	ldi	r20, 0xFA	; 250
    1ad8:	54 e4       	ldi	r21, 0x44	; 68
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	88 87       	std	Y+8, r24	; 0x08
    1ae4:	99 87       	std	Y+9, r25	; 0x09
    1ae6:	aa 87       	std	Y+10, r26	; 0x0a
    1ae8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1aea:	68 85       	ldd	r22, Y+8	; 0x08
    1aec:	79 85       	ldd	r23, Y+9	; 0x09
    1aee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <Save_Password+0x10e>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9f 83       	std	Y+7, r25	; 0x07
    1b08:	8e 83       	std	Y+6, r24	; 0x06
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <Save_Password+0x18c>
	else if (__tmp > 65535)
    1b0c:	68 85       	ldd	r22, Y+8	; 0x08
    1b0e:	79 85       	ldd	r23, Y+9	; 0x09
    1b10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <Save_Password+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b26:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b28:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9f 83       	std	Y+7, r25	; 0x07
    1b4a:	8e 83       	std	Y+6, r24	; 0x06
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <Save_Password+0x16e>
    1b4e:	88 ec       	ldi	r24, 0xC8	; 200
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9d 83       	std	Y+5, r25	; 0x05
    1b54:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <Save_Password+0x15c>
    1b5e:	9d 83       	std	Y+5, r25	; 0x05
    1b60:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8e 81       	ldd	r24, Y+6	; 0x06
    1b64:	9f 81       	ldd	r25, Y+7	; 0x07
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9f 83       	std	Y+7, r25	; 0x07
    1b6a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <Save_Password+0x150>
    1b74:	24 c0       	rjmp	.+72     	; 0x1bbe <Save_Password+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	68 85       	ldd	r22, Y+8	; 0x08
    1b78:	79 85       	ldd	r23, Y+9	; 0x09
    1b7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9f 83       	std	Y+7, r25	; 0x07
    1b88:	8e 83       	std	Y+6, r24	; 0x06
    1b8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b8e:	9b 83       	std	Y+3, r25	; 0x03
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	9b 81       	ldd	r25, Y+3	; 0x03
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <Save_Password+0x198>
    1b9a:	9b 83       	std	Y+3, r25	; 0x03
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <Save_Password+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ba0:	69 89       	ldd	r22, Y+17	; 0x11
    1ba2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	88 8b       	std	Y+16, r24	; 0x10
    1bb2:	88 89       	ldd	r24, Y+16	; 0x10
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	8a 95       	dec	r24
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <Save_Password+0x1ba>
    1bbc:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description : Function to save the password in EEPROM
 */
void Save_Password(const uint8* PW){
	uint8 i=0;
	for(i=0 ; i < PASSWORD_SIZE ; i++){
    1bbe:	89 8d       	ldd	r24, Y+25	; 0x19
    1bc0:	8f 5f       	subi	r24, 0xFF	; 255
    1bc2:	89 8f       	std	Y+25, r24	; 0x19
    1bc4:	89 8d       	ldd	r24, Y+25	; 0x19
    1bc6:	85 30       	cpi	r24, 0x05	; 5
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <Save_Password+0x1ce>
    1bca:	28 cf       	rjmp	.-432    	; 0x1a1c <Save_Password+0x1e>
        EEPROM_writeByte(START_ADDRESS + i,PW[i]);
        _delay_us(10);
	}
}
    1bcc:	6b 96       	adiw	r28, 0x1b	; 27
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <Read_Password>:
/*
 * Description : Function to read the password from EEPROM
 */
void Read_Password(uint8 *PW){
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	6b 97       	sbiw	r28, 0x1b	; 27
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	9b 8f       	std	Y+27, r25	; 0x1b
    1bf4:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8 i;
	for(i=0 ; i < PASSWORD_SIZE ; i++){
    1bf6:	19 8e       	std	Y+25, r1	; 0x19
    1bf8:	d2 c0       	rjmp	.+420    	; 0x1d9e <Read_Password+0x1c0>
	    EEPROM_readByte(START_ADDRESS+i, &PW[i]);
    1bfa:	89 8d       	ldd	r24, Y+25	; 0x19
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	8f 5e       	subi	r24, 0xEF	; 239
    1c02:	9c 4f       	sbci	r25, 0xFC	; 252
    1c04:	ac 01       	movw	r20, r24
    1c06:	89 8d       	ldd	r24, Y+25	; 0x19
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c0e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c10:	28 0f       	add	r18, r24
    1c12:	39 1f       	adc	r19, r25
    1c14:	ca 01       	movw	r24, r20
    1c16:	b9 01       	movw	r22, r18
    1c18:	0e 94 4b 0c 	call	0x1896	; 0x1896 <EEPROM_readByte>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e2       	ldi	r26, 0x20	; 32
    1c22:	b1 e4       	ldi	r27, 0x41	; 65
    1c24:	8d 8b       	std	Y+21, r24	; 0x15
    1c26:	9e 8b       	std	Y+22, r25	; 0x16
    1c28:	af 8b       	std	Y+23, r26	; 0x17
    1c2a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c30:	8f 89       	ldd	r24, Y+23	; 0x17
    1c32:	98 8d       	ldd	r25, Y+24	; 0x18
    1c34:	2b ea       	ldi	r18, 0xAB	; 171
    1c36:	3a ea       	ldi	r19, 0xAA	; 170
    1c38:	4a e2       	ldi	r20, 0x2A	; 42
    1c3a:	50 e4       	ldi	r21, 0x40	; 64
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	89 8b       	std	Y+17, r24	; 0x11
    1c46:	9a 8b       	std	Y+18, r25	; 0x12
    1c48:	ab 8b       	std	Y+19, r26	; 0x13
    1c4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c4c:	69 89       	ldd	r22, Y+17	; 0x11
    1c4e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c50:	8b 89       	ldd	r24, Y+19	; 0x13
    1c52:	9c 89       	ldd	r25, Y+20	; 0x14
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c60:	88 23       	and	r24, r24
    1c62:	1c f4       	brge	.+6      	; 0x1c6a <Read_Password+0x8c>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	88 8b       	std	Y+16, r24	; 0x10
    1c68:	91 c0       	rjmp	.+290    	; 0x1d8c <Read_Password+0x1ae>
	else if (__tmp > 255)
    1c6a:	69 89       	ldd	r22, Y+17	; 0x11
    1c6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c70:	9c 89       	ldd	r25, Y+20	; 0x14
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	53 e4       	ldi	r21, 0x43	; 67
    1c7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	0c f0       	brlt	.+2      	; 0x1c84 <Read_Password+0xa6>
    1c82:	7b c0       	rjmp	.+246    	; 0x1d7a <Read_Password+0x19c>
	{
		_delay_ms(__us / 1000.0);
    1c84:	6d 89       	ldd	r22, Y+21	; 0x15
    1c86:	7e 89       	ldd	r23, Y+22	; 0x16
    1c88:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	4a e7       	ldi	r20, 0x7A	; 122
    1c92:	54 e4       	ldi	r21, 0x44	; 68
    1c94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8c 87       	std	Y+12, r24	; 0x0c
    1c9e:	9d 87       	std	Y+13, r25	; 0x0d
    1ca0:	ae 87       	std	Y+14, r26	; 0x0e
    1ca2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ca6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ca8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1caa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a ef       	ldi	r20, 0xFA	; 250
    1cb2:	54 e4       	ldi	r21, 0x44	; 68
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	88 87       	std	Y+8, r24	; 0x08
    1cbe:	99 87       	std	Y+9, r25	; 0x09
    1cc0:	aa 87       	std	Y+10, r26	; 0x0a
    1cc2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1cc4:	68 85       	ldd	r22, Y+8	; 0x08
    1cc6:	79 85       	ldd	r23, Y+9	; 0x09
    1cc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <Read_Password+0x108>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9f 83       	std	Y+7, r25	; 0x07
    1ce2:	8e 83       	std	Y+6, r24	; 0x06
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <Read_Password+0x186>
	else if (__tmp > 65535)
    1ce6:	68 85       	ldd	r22, Y+8	; 0x08
    1ce8:	79 85       	ldd	r23, Y+9	; 0x09
    1cea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <Read_Password+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d00:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9f 83       	std	Y+7, r25	; 0x07
    1d24:	8e 83       	std	Y+6, r24	; 0x06
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <Read_Password+0x168>
    1d28:	88 ec       	ldi	r24, 0xC8	; 200
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9d 83       	std	Y+5, r25	; 0x05
    1d2e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <Read_Password+0x156>
    1d38:	9d 83       	std	Y+5, r25	; 0x05
    1d3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9f 83       	std	Y+7, r25	; 0x07
    1d44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8e 81       	ldd	r24, Y+6	; 0x06
    1d48:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <Read_Password+0x14a>
    1d4e:	24 c0       	rjmp	.+72     	; 0x1d98 <Read_Password+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	68 85       	ldd	r22, Y+8	; 0x08
    1d52:	79 85       	ldd	r23, Y+9	; 0x09
    1d54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9f 83       	std	Y+7, r25	; 0x07
    1d62:	8e 83       	std	Y+6, r24	; 0x06
    1d64:	8e 81       	ldd	r24, Y+6	; 0x06
    1d66:	9f 81       	ldd	r25, Y+7	; 0x07
    1d68:	9b 83       	std	Y+3, r25	; 0x03
    1d6a:	8a 83       	std	Y+2, r24	; 0x02
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <Read_Password+0x192>
    1d74:	9b 83       	std	Y+3, r25	; 0x03
    1d76:	8a 83       	std	Y+2, r24	; 0x02
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <Read_Password+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d7a:	69 89       	ldd	r22, Y+17	; 0x11
    1d7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	88 8b       	std	Y+16, r24	; 0x10
    1d8c:	88 89       	ldd	r24, Y+16	; 0x10
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	8a 95       	dec	r24
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <Read_Password+0x1b4>
    1d96:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description : Function to read the password from EEPROM
 */
void Read_Password(uint8 *PW){
	uint8 i;
	for(i=0 ; i < PASSWORD_SIZE ; i++){
    1d98:	89 8d       	ldd	r24, Y+25	; 0x19
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	89 8f       	std	Y+25, r24	; 0x19
    1d9e:	89 8d       	ldd	r24, Y+25	; 0x19
    1da0:	85 30       	cpi	r24, 0x05	; 5
    1da2:	08 f4       	brcc	.+2      	; 0x1da6 <Read_Password+0x1c8>
    1da4:	2a cf       	rjmp	.-428    	; 0x1bfa <Read_Password+0x1c>
	    EEPROM_readByte(START_ADDRESS+i, &PW[i]);
	        _delay_us(10);
		}
}
    1da6:	6b 96       	adiw	r28, 0x1b	; 27
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <Input_Password>:
/*
 * Description : function that take the input password from the user
 */
void Input_Password(uint8* PW){
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	6b 97       	sbiw	r28, 0x1b	; 27
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	9b 8f       	std	Y+27, r25	; 0x1b
    1dd2:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8 i=0;
    1dd4:	19 8e       	std	Y+25, r1	; 0x19
    1dd6:	d9 c0       	rjmp	.+434    	; 0x1f8a <Input_Password+0x1d2>
	while(i < PASSWORD_SIZE + 1){
		PW[i]=UART_recieveByte();
    1dd8:	89 8d       	ldd	r24, Y+25	; 0x19
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1de0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1de2:	8c 01       	movw	r16, r24
    1de4:	02 0f       	add	r16, r18
    1de6:	13 1f       	adc	r17, r19
    1de8:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <UART_recieveByte>
    1dec:	f8 01       	movw	r30, r16
    1dee:	80 83       	st	Z, r24
		if(PW[i] == '='){
    1df0:	89 8d       	ldd	r24, Y+25	; 0x19
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1df8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	e2 0f       	add	r30, r18
    1dfe:	f3 1f       	adc	r31, r19
    1e00:	80 81       	ld	r24, Z
    1e02:	8d 33       	cpi	r24, 0x3D	; 61
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <Input_Password+0x50>
    1e06:	c5 c0       	rjmp	.+394    	; 0x1f92 <Input_Password+0x1da>
			break;
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a0 e8       	ldi	r26, 0x80	; 128
    1e0e:	bf e3       	ldi	r27, 0x3F	; 63
    1e10:	8d 8b       	std	Y+21, r24	; 0x15
    1e12:	9e 8b       	std	Y+22, r25	; 0x16
    1e14:	af 8b       	std	Y+23, r26	; 0x17
    1e16:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e18:	6d 89       	ldd	r22, Y+21	; 0x15
    1e1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e20:	2b ea       	ldi	r18, 0xAB	; 171
    1e22:	3a ea       	ldi	r19, 0xAA	; 170
    1e24:	4a e2       	ldi	r20, 0x2A	; 42
    1e26:	50 e4       	ldi	r21, 0x40	; 64
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	89 8b       	std	Y+17, r24	; 0x11
    1e32:	9a 8b       	std	Y+18, r25	; 0x12
    1e34:	ab 8b       	std	Y+19, r26	; 0x13
    1e36:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e38:	69 89       	ldd	r22, Y+17	; 0x11
    1e3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	5f e3       	ldi	r21, 0x3F	; 63
    1e48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	1c f4       	brge	.+6      	; 0x1e56 <Input_Password+0x9e>
		__ticks = 1;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	88 8b       	std	Y+16, r24	; 0x10
    1e54:	91 c0       	rjmp	.+290    	; 0x1f78 <Input_Password+0x1c0>
	else if (__tmp > 255)
    1e56:	69 89       	ldd	r22, Y+17	; 0x11
    1e58:	7a 89       	ldd	r23, Y+18	; 0x12
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	53 e4       	ldi	r21, 0x43	; 67
    1e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	0c f0       	brlt	.+2      	; 0x1e70 <Input_Password+0xb8>
    1e6e:	7b c0       	rjmp	.+246    	; 0x1f66 <Input_Password+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	54 e4       	ldi	r21, 0x44	; 68
    1e80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8c 87       	std	Y+12, r24	; 0x0c
    1e8a:	9d 87       	std	Y+13, r25	; 0x0d
    1e8c:	ae 87       	std	Y+14, r26	; 0x0e
    1e8e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e90:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e92:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e94:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e96:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a ef       	ldi	r20, 0xFA	; 250
    1e9e:	54 e4       	ldi	r21, 0x44	; 68
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	88 87       	std	Y+8, r24	; 0x08
    1eaa:	99 87       	std	Y+9, r25	; 0x09
    1eac:	aa 87       	std	Y+10, r26	; 0x0a
    1eae:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1eb0:	68 85       	ldd	r22, Y+8	; 0x08
    1eb2:	79 85       	ldd	r23, Y+9	; 0x09
    1eb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	2c f4       	brge	.+10     	; 0x1ed2 <Input_Password+0x11a>
		__ticks = 1;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	9f 83       	std	Y+7, r25	; 0x07
    1ece:	8e 83       	std	Y+6, r24	; 0x06
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <Input_Password+0x198>
	else if (__tmp > 65535)
    1ed2:	68 85       	ldd	r22, Y+8	; 0x08
    1ed4:	79 85       	ldd	r23, Y+9	; 0x09
    1ed6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	4c f5       	brge	.+82     	; 0x1f3c <Input_Password+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eea:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eec:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ef0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e2       	ldi	r20, 0x20	; 32
    1ef8:	51 e4       	ldi	r21, 0x41	; 65
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9f 83       	std	Y+7, r25	; 0x07
    1f10:	8e 83       	std	Y+6, r24	; 0x06
    1f12:	0f c0       	rjmp	.+30     	; 0x1f32 <Input_Password+0x17a>
    1f14:	88 ec       	ldi	r24, 0xC8	; 200
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9d 83       	std	Y+5, r25	; 0x05
    1f1a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <Input_Password+0x168>
    1f24:	9d 83       	std	Y+5, r25	; 0x05
    1f26:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f28:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	9f 83       	std	Y+7, r25	; 0x07
    1f30:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f32:	8e 81       	ldd	r24, Y+6	; 0x06
    1f34:	9f 81       	ldd	r25, Y+7	; 0x07
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	69 f7       	brne	.-38     	; 0x1f14 <Input_Password+0x15c>
    1f3a:	24 c0       	rjmp	.+72     	; 0x1f84 <Input_Password+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	68 85       	ldd	r22, Y+8	; 0x08
    1f3e:	79 85       	ldd	r23, Y+9	; 0x09
    1f40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9f 83       	std	Y+7, r25	; 0x07
    1f4e:	8e 83       	std	Y+6, r24	; 0x06
    1f50:	8e 81       	ldd	r24, Y+6	; 0x06
    1f52:	9f 81       	ldd	r25, Y+7	; 0x07
    1f54:	9b 83       	std	Y+3, r25	; 0x03
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <Input_Password+0x1a4>
    1f60:	9b 83       	std	Y+3, r25	; 0x03
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <Input_Password+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f66:	69 89       	ldd	r22, Y+17	; 0x11
    1f68:	7a 89       	ldd	r23, Y+18	; 0x12
    1f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	88 8b       	std	Y+16, r24	; 0x10
    1f78:	88 89       	ldd	r24, Y+16	; 0x10
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	8a 95       	dec	r24
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <Input_Password+0x1c6>
    1f82:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_us(1);
		i++;
    1f84:	89 8d       	ldd	r24, Y+25	; 0x19
    1f86:	8f 5f       	subi	r24, 0xFF	; 255
    1f88:	89 8f       	std	Y+25, r24	; 0x19
/*
 * Description : function that take the input password from the user
 */
void Input_Password(uint8* PW){
	uint8 i=0;
	while(i < PASSWORD_SIZE + 1){
    1f8a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f8c:	86 30       	cpi	r24, 0x06	; 6
    1f8e:	08 f4       	brcc	.+2      	; 0x1f92 <Input_Password+0x1da>
    1f90:	23 cf       	rjmp	.-442    	; 0x1dd8 <Input_Password+0x20>
			break;
		}
		_delay_us(1);
		i++;
	}
}
    1f92:	6b 96       	adiw	r28, 0x1b	; 27
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	08 95       	ret

00001fa8 <Open_door>:
/*
 * Description : function to control DC-Motor to open the door
 */
void Open_door(void){
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
	 UART_sendByte(0);
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <UART_sendByte>
	 DcMotor_Rotate(CW,100);
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	64 e6       	ldi	r22, 0x64	; 100
    1fba:	0e 94 40 07 	call	0xe80	; 0xe80 <DcMotor_Rotate>
	 Door_wait(15);
    1fbe:	8f e0       	ldi	r24, 0x0F	; 15
    1fc0:	0e 94 b7 0c 	call	0x196e	; 0x196e <Door_wait>
	 DcMotor_Rotate(STOP,0);
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	0e 94 40 07 	call	0xe80	; 0xe80 <DcMotor_Rotate>
	 Door_wait(3);
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	0e 94 b7 0c 	call	0x196e	; 0x196e <Door_wait>
	 DcMotor_Rotate(A_CW,100);
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	64 e6       	ldi	r22, 0x64	; 100
    1fd6:	0e 94 40 07 	call	0xe80	; 0xe80 <DcMotor_Rotate>
	 Door_wait(15);
    1fda:	8f e0       	ldi	r24, 0x0F	; 15
    1fdc:	0e 94 b7 0c 	call	0x196e	; 0x196e <Door_wait>
	 DcMotor_Rotate(STOP,0);
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	0e 94 40 07 	call	0xe80	; 0xe80 <DcMotor_Rotate>
}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <main>:
int main(){
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	a7 97       	sbiw	r28, 0x27	; 39
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
	uint8 password_1[PASSWORD_SIZE + 1]; /* two arrays to save the two passwords in it */
	uint8 password_2[PASSWORD_SIZE + 1];
	uint8 key=0,flag=0;
    2002:	1a 82       	std	Y+2, r1	; 0x02
    2004:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7); /* to enable the interrupts */
    2006:	af e5       	ldi	r26, 0x5F	; 95
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	ef e5       	ldi	r30, 0x5F	; 95
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	80 68       	ori	r24, 0x80	; 128
    2012:	8c 93       	st	X, r24
	UART_ConfigType UART_Config ={eight_bits,disable,one_bit,baud_9600,asynch,on}; /* initialize UART driver*/
    2014:	9e 01       	movw	r18, r28
    2016:	21 5f       	subi	r18, 0xF1	; 241
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	3f 8f       	std	Y+31, r19	; 0x1f
    201c:	2e 8f       	std	Y+30, r18	; 0x1e
    201e:	8e e6       	ldi	r24, 0x6E	; 110
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	99 a3       	std	Y+33, r25	; 0x21
    2024:	88 a3       	std	Y+32, r24	; 0x20
    2026:	97 e0       	ldi	r25, 0x07	; 7
    2028:	9a a3       	std	Y+34, r25	; 0x22
    202a:	e8 a1       	ldd	r30, Y+32	; 0x20
    202c:	f9 a1       	ldd	r31, Y+33	; 0x21
    202e:	00 80       	ld	r0, Z
    2030:	28 a1       	ldd	r18, Y+32	; 0x20
    2032:	39 a1       	ldd	r19, Y+33	; 0x21
    2034:	2f 5f       	subi	r18, 0xFF	; 255
    2036:	3f 4f       	sbci	r19, 0xFF	; 255
    2038:	39 a3       	std	Y+33, r19	; 0x21
    203a:	28 a3       	std	Y+32, r18	; 0x20
    203c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    203e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2040:	00 82       	st	Z, r0
    2042:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2044:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2046:	2f 5f       	subi	r18, 0xFF	; 255
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
    204a:	3f 8f       	std	Y+31, r19	; 0x1f
    204c:	2e 8f       	std	Y+30, r18	; 0x1e
    204e:	3a a1       	ldd	r19, Y+34	; 0x22
    2050:	31 50       	subi	r19, 0x01	; 1
    2052:	3a a3       	std	Y+34, r19	; 0x22
    2054:	8a a1       	ldd	r24, Y+34	; 0x22
    2056:	88 23       	and	r24, r24
    2058:	41 f7       	brne	.-48     	; 0x202a <main+0x3c>
    UART_init(&UART_Config);
    205a:	ce 01       	movw	r24, r28
    205c:	0f 96       	adiw	r24, 0x0f	; 15
    205e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <UART_init>
	DcMotor_Init(); /* initialize DC-Motor driver */
    2062:	0e 94 25 07 	call	0xe4a	; 0xe4a <DcMotor_Init>
	Buzzer_init();  /* initialize BUZZER driver */
    2066:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <Buzzer_init>
    Timer1_ConfigType Timer_Config = {compare,0,compare_value,clk_256}; /* initialize Timer driver*/
    206a:	fe 01       	movw	r30, r28
    206c:	76 96       	adiw	r30, 0x16	; 22
    206e:	fc a3       	std	Y+36, r31	; 0x24
    2070:	eb a3       	std	Y+35, r30	; 0x23
    2072:	28 e6       	ldi	r18, 0x68	; 104
    2074:	31 e0       	ldi	r19, 0x01	; 1
    2076:	3e a3       	std	Y+38, r19	; 0x26
    2078:	2d a3       	std	Y+37, r18	; 0x25
    207a:	36 e0       	ldi	r19, 0x06	; 6
    207c:	3f a3       	std	Y+39, r19	; 0x27
    207e:	ed a1       	ldd	r30, Y+37	; 0x25
    2080:	fe a1       	ldd	r31, Y+38	; 0x26
    2082:	00 80       	ld	r0, Z
    2084:	2d a1       	ldd	r18, Y+37	; 0x25
    2086:	3e a1       	ldd	r19, Y+38	; 0x26
    2088:	2f 5f       	subi	r18, 0xFF	; 255
    208a:	3f 4f       	sbci	r19, 0xFF	; 255
    208c:	3e a3       	std	Y+38, r19	; 0x26
    208e:	2d a3       	std	Y+37, r18	; 0x25
    2090:	eb a1       	ldd	r30, Y+35	; 0x23
    2092:	fc a1       	ldd	r31, Y+36	; 0x24
    2094:	00 82       	st	Z, r0
    2096:	2b a1       	ldd	r18, Y+35	; 0x23
    2098:	3c a1       	ldd	r19, Y+36	; 0x24
    209a:	2f 5f       	subi	r18, 0xFF	; 255
    209c:	3f 4f       	sbci	r19, 0xFF	; 255
    209e:	3c a3       	std	Y+36, r19	; 0x24
    20a0:	2b a3       	std	Y+35, r18	; 0x23
    20a2:	3f a1       	ldd	r19, Y+39	; 0x27
    20a4:	31 50       	subi	r19, 0x01	; 1
    20a6:	3f a3       	std	Y+39, r19	; 0x27
    20a8:	8f a1       	ldd	r24, Y+39	; 0x27
    20aa:	88 23       	and	r24, r24
    20ac:	41 f7       	brne	.-48     	; 0x207e <main+0x90>
    Timer1_init(&Timer_Config);
    20ae:	ce 01       	movw	r24, r28
    20b0:	46 96       	adiw	r24, 0x16	; 22
    20b2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <Timer1_init>
    Timer1_setCallBack(Timer1_Inc);
    20b6:	8b ea       	ldi	r24, 0xAB	; 171
    20b8:	9c e0       	ldi	r25, 0x0C	; 12
    20ba:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <Timer1_setCallBack>
    while(1){
    	if(g_flag == 0){ /* password not written */
    20be:	80 91 79 01 	lds	r24, 0x0179
    20c2:	88 23       	and	r24, r24
    20c4:	d9 f4       	brne	.+54     	; 0x20fc <main+0x10e>
    		Input_Password(password_1); /* the user enter the first password */
    20c6:	ce 01       	movw	r24, r28
    20c8:	03 96       	adiw	r24, 0x03	; 3
    20ca:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Input_Password>
    		Input_Password(password_2); /* the user enter the second password */
    20ce:	ce 01       	movw	r24, r28
    20d0:	09 96       	adiw	r24, 0x09	; 9
    20d2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Input_Password>
    		g_flag=Check_Password(password_1,password_2);
    20d6:	ce 01       	movw	r24, r28
    20d8:	03 96       	adiw	r24, 0x03	; 3
    20da:	9e 01       	movw	r18, r28
    20dc:	27 5f       	subi	r18, 0xF7	; 247
    20de:	3f 4f       	sbci	r19, 0xFF	; 255
    20e0:	b9 01       	movw	r22, r18
    20e2:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Check_Password>
    20e6:	80 93 79 01 	sts	0x0179, r24
    		if(g_flag){
    20ea:	80 91 79 01 	lds	r24, 0x0179
    20ee:	88 23       	and	r24, r24
    20f0:	31 f3       	breq	.-52     	; 0x20be <main+0xd0>
    			Save_Password(password_1); /* if the password matches save the password in EEPROM */
    20f2:	ce 01       	movw	r24, r28
    20f4:	03 96       	adiw	r24, 0x03	; 3
    20f6:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <Save_Password>
    20fa:	e1 cf       	rjmp	.-62     	; 0x20be <main+0xd0>
    		}
    	}
    	else if (g_flag){
    20fc:	80 91 79 01 	lds	r24, 0x0179
    2100:	88 23       	and	r24, r24
    2102:	e9 f2       	breq	.-70     	; 0x20be <main+0xd0>
    		key=UART_recieveByte();
    2104:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <UART_recieveByte>
    2108:	8a 83       	std	Y+2, r24	; 0x02
    		switch (key){
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	e8 2f       	mov	r30, r24
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	fd 8f       	std	Y+29, r31	; 0x1d
    2112:	ec 8f       	std	Y+28, r30	; 0x1c
    2114:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2116:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2118:	2b 32       	cpi	r18, 0x2B	; 43
    211a:	31 05       	cpc	r19, r1
    211c:	31 f0       	breq	.+12     	; 0x212a <main+0x13c>
    211e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2120:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2122:	8d 32       	cpi	r24, 0x2D	; 45
    2124:	91 05       	cpc	r25, r1
    2126:	49 f1       	breq	.+82     	; 0x217a <main+0x18c>
    2128:	ca cf       	rjmp	.-108    	; 0x20be <main+0xd0>
    		/* case '+' : open the door
    		 * case '-' : change password
    		 */
    		case '+':
    			flag=0;
    212a:	19 82       	std	Y+1, r1	; 0x01
        		Input_Password(password_1); /* the user enter the first password */
    212c:	ce 01       	movw	r24, r28
    212e:	03 96       	adiw	r24, 0x03	; 3
    2130:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <Input_Password>
        		Read_Password(password_2); /* read the password from the EEPROM  */
    2134:	ce 01       	movw	r24, r28
    2136:	09 96       	adiw	r24, 0x09	; 9
    2138:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <Read_Password>
        		flag=Check_Password(password_1,password_2);
    213c:	ce 01       	movw	r24, r28
    213e:	03 96       	adiw	r24, 0x03	; 3
    2140:	9e 01       	movw	r18, r28
    2142:	27 5f       	subi	r18, 0xF7	; 247
    2144:	3f 4f       	sbci	r19, 0xFF	; 255
    2146:	b9 01       	movw	r22, r18
    2148:	0e 94 c3 0c 	call	0x1986	; 0x1986 <Check_Password>
    214c:	89 83       	std	Y+1, r24	; 0x01
        		UART_sendByte(flag);
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	0e 94 dd 11 	call	0x23ba	; 0x23ba <UART_sendByte>
        		if(flag){
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	88 23       	and	r24, r24
    2158:	19 f0       	breq	.+6      	; 0x2160 <main+0x172>
        			Open_door();
    215a:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <Open_door>
    215e:	af cf       	rjmp	.-162    	; 0x20be <main+0xd0>
        		}
        		else if ( UART_recieveByte() == MAX_WRONG_ENTITIES){
    2160:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <UART_recieveByte>
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	09 f0       	breq	.+2      	; 0x216a <main+0x17c>
    2168:	aa cf       	rjmp	.-172    	; 0x20be <main+0xd0>
        			Buzzer_on();
    216a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Buzzer_on>
        			Door_wait(60);
    216e:	8c e3       	ldi	r24, 0x3C	; 60
    2170:	0e 94 b7 0c 	call	0x196e	; 0x196e <Door_wait>
        			Buzzer_off();
    2174:	0e 94 19 07 	call	0xe32	; 0xe32 <Buzzer_off>
    2178:	a2 cf       	rjmp	.-188    	; 0x20be <main+0xd0>
        		}
        		break; /* end this case */
    		case '-':
    			g_flag=0;
    217a:	10 92 79 01 	sts	0x0179, r1
    217e:	9f cf       	rjmp	.-194    	; 0x20be <main+0xd0>

00002180 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>
//0b00000010
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <TWI_init+0xa>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (uint8_t)((F_CPU / (Config_Ptr->bit_rate * 2)) - 8);
    2192:	00 e2       	ldi	r16, 0x20	; 32
    2194:	10 e0       	ldi	r17, 0x00	; 0
    2196:	e9 81       	ldd	r30, Y+1	; 0x01
    2198:	fa 81       	ldd	r31, Y+2	; 0x02
    219a:	84 81       	ldd	r24, Z+4	; 0x04
    219c:	95 81       	ldd	r25, Z+5	; 0x05
    219e:	a6 81       	ldd	r26, Z+6	; 0x06
    21a0:	b7 81       	ldd	r27, Z+7	; 0x07
    21a2:	9c 01       	movw	r18, r24
    21a4:	ad 01       	movw	r20, r26
    21a6:	22 0f       	add	r18, r18
    21a8:	33 1f       	adc	r19, r19
    21aa:	44 1f       	adc	r20, r20
    21ac:	55 1f       	adc	r21, r21
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	92 e1       	ldi	r25, 0x12	; 18
    21b2:	aa e7       	ldi	r26, 0x7A	; 122
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
    21be:	da 01       	movw	r26, r20
    21c0:	c9 01       	movw	r24, r18
    21c2:	88 50       	subi	r24, 0x08	; 8
    21c4:	f8 01       	movw	r30, r16
    21c6:	80 83       	st	Z, r24
	TWSR = 0x00;
    21c8:	e1 e2       	ldi	r30, 0x21	; 33
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    21ce:	22 e2       	ldi	r18, 0x22	; 34
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	e9 81       	ldd	r30, Y+1	; 0x01
    21d4:	fa 81       	ldd	r31, Y+2	; 0x02
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	a2 81       	ldd	r26, Z+2	; 0x02
    21dc:	b3 81       	ldd	r27, Z+3	; 0x03
    21de:	f9 01       	movw	r30, r18
    21e0:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    21e2:	e6 e5       	ldi	r30, 0x56	; 86
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	84 e0       	ldi	r24, 0x04	; 4
    21e8:	80 83       	st	Z, r24
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	08 95       	ret

000021f8 <TWI_start>:

void TWI_start(void)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2200:	e6 e5       	ldi	r30, 0x56	; 86
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	84 ea       	ldi	r24, 0xA4	; 164
    2206:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2208:	e6 e5       	ldi	r30, 0x56	; 86
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	88 23       	and	r24, r24
    2210:	dc f7       	brge	.-10     	; 0x2208 <TWI_start+0x10>
}
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <TWI_stop>:

void TWI_stop(void)
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2220:	e6 e5       	ldi	r30, 0x56	; 86
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	84 e9       	ldi	r24, 0x94	; 148
    2226:	80 83       	st	Z, r24
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	0f 92       	push	r0
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    223a:	e3 e2       	ldi	r30, 0x23	; 35
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2242:	e6 e5       	ldi	r30, 0x56	; 86
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	84 e8       	ldi	r24, 0x84	; 132
    2248:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    224a:	e6 e5       	ldi	r30, 0x56	; 86
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	88 23       	and	r24, r24
    2252:	dc f7       	brge	.-10     	; 0x224a <TWI_writeByte+0x1c>
}
    2254:	0f 90       	pop	r0
    2256:	cf 91       	pop	r28
    2258:	df 91       	pop	r29
    225a:	08 95       	ret

0000225c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2264:	e6 e5       	ldi	r30, 0x56	; 86
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	84 ec       	ldi	r24, 0xC4	; 196
    226a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    226c:	e6 e5       	ldi	r30, 0x56	; 86
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	88 23       	and	r24, r24
    2274:	dc f7       	brge	.-10     	; 0x226c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2276:	e3 e2       	ldi	r30, 0x23	; 35
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
}
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    228a:	e6 e5       	ldi	r30, 0x56	; 86
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	84 e8       	ldi	r24, 0x84	; 132
    2290:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2292:	e6 e5       	ldi	r30, 0x56	; 86
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	88 23       	and	r24, r24
    229a:	dc f7       	brge	.-10     	; 0x2292 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    229c:	e3 e2       	ldi	r30, 0x23	; 35
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
}
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	0f 92       	push	r0
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    22b2:	e1 e2       	ldi	r30, 0x21	; 33
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	88 7f       	andi	r24, 0xF8	; 248
    22ba:	89 83       	std	Y+1, r24	; 0x01
    return status;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init( UART_ConfigType *Config_ptr)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <UART_init+0x6>
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <UART_init+0x8>
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    22d6:	1a 82       	std	Y+2, r1	; 0x02
    22d8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    22da:	eb e2       	ldi	r30, 0x2B	; 43
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	82 e0       	ldi	r24, 0x02	; 2
    22e0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB =(1<<RXEN) | (1<<TXEN);
    22e2:	ea e2       	ldi	r30, 0x2A	; 42
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	88 e1       	ldi	r24, 0x18	; 24
    22e8:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_ptr->StopBit << 3 )  | ((Config_ptr->Bit_size&(3)) << 1) | (Config_ptr->Parity << 5);
    22ea:	a0 e4       	ldi	r26, 0x40	; 64
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	eb 81       	ldd	r30, Y+3	; 0x03
    22f0:	fc 81       	ldd	r31, Y+4	; 0x04
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	28 2f       	mov	r18, r24
    2306:	20 68       	ori	r18, 0x80	; 128
    2308:	eb 81       	ldd	r30, Y+3	; 0x03
    230a:	fc 81       	ldd	r31, Y+4	; 0x04
    230c:	80 81       	ld	r24, Z
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	83 70       	andi	r24, 0x03	; 3
    2314:	90 70       	andi	r25, 0x00	; 0
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	28 2b       	or	r18, r24
    231c:	eb 81       	ldd	r30, Y+3	; 0x03
    231e:	fc 81       	ldd	r31, Y+4	; 0x04
    2320:	81 81       	ldd	r24, Z+1	; 0x01
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	82 95       	swap	r24
    232c:	92 95       	swap	r25
    232e:	90 7f       	andi	r25, 0xF0	; 240
    2330:	98 27       	eor	r25, r24
    2332:	80 7f       	andi	r24, 0xF0	; 240
    2334:	98 27       	eor	r25, r24
    2336:	82 2b       	or	r24, r18
    2338:	8c 93       	st	X, r24
	if (Config_ptr->Bit_size == nine_bits)
    233a:	eb 81       	ldd	r30, Y+3	; 0x03
    233c:	fc 81       	ldd	r31, Y+4	; 0x04
    233e:	80 81       	ld	r24, Z
    2340:	87 30       	cpi	r24, 0x07	; 7
    2342:	39 f4       	brne	.+14     	; 0x2352 <UART_init+0x8c>
		{
			UCSRB |= (1<<UCSZ2);
    2344:	aa e2       	ldi	r26, 0x2A	; 42
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	ea e2       	ldi	r30, 0x2A	; 42
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	84 60       	ori	r24, 0x04	; 4
    2350:	8c 93       	st	X, r24
		}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_ptr->BaudRate * 8UL))) - 1);
    2352:	eb 81       	ldd	r30, Y+3	; 0x03
    2354:	fc 81       	ldd	r31, Y+4	; 0x04
    2356:	83 81       	ldd	r24, Z+3	; 0x03
    2358:	94 81       	ldd	r25, Z+4	; 0x04
    235a:	cc 01       	movw	r24, r24
    235c:	a0 e0       	ldi	r26, 0x00	; 0
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	aa 1f       	adc	r26, r26
    2366:	bb 1f       	adc	r27, r27
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	aa 1f       	adc	r26, r26
    236e:	bb 1f       	adc	r27, r27
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	aa 1f       	adc	r26, r26
    2376:	bb 1f       	adc	r27, r27
    2378:	9c 01       	movw	r18, r24
    237a:	ad 01       	movw	r20, r26
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	92 e1       	ldi	r25, 0x12	; 18
    2380:	aa e7       	ldi	r26, 0x7A	; 122
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 82 12 	call	0x2504	; 0x2504 <__udivmodsi4>
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9a 83       	std	Y+2, r25	; 0x02
    2394:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2396:	e0 e4       	ldi	r30, 0x40	; 64
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	89 2f       	mov	r24, r25
    23a0:	99 27       	eor	r25, r25
    23a2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    23a4:	e9 e2       	ldi	r30, 0x29	; 41
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	80 83       	st	Z, r24
}
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	0f 92       	push	r0
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    23c6:	eb e2       	ldi	r30, 0x2B	; 43
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	88 2f       	mov	r24, r24
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	80 72       	andi	r24, 0x20	; 32
    23d2:	90 70       	andi	r25, 0x00	; 0
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	b9 f3       	breq	.-18     	; 0x23c6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    23d8:	ec e2       	ldi	r30, 0x2C	; 44
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    23f0:	eb e2       	ldi	r30, 0x2B	; 43
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	88 23       	and	r24, r24
    23f8:	dc f7       	brge	.-10     	; 0x23f0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    23fa:	ec e2       	ldi	r30, 0x2C	; 44
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <UART_sendString+0x6>
    240c:	0f 92       	push	r0
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	9b 83       	std	Y+3, r25	; 0x03
    2414:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2416:	19 82       	std	Y+1, r1	; 0x01
    2418:	0e c0       	rjmp	.+28     	; 0x2436 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	9b 81       	ldd	r25, Y+3	; 0x03
    2424:	fc 01       	movw	r30, r24
    2426:	e2 0f       	add	r30, r18
    2428:	f3 1f       	adc	r31, r19
    242a:	80 81       	ld	r24, Z
    242c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <UART_sendByte>
		i++;
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	8f 5f       	subi	r24, 0xFF	; 255
    2434:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	9b 81       	ldd	r25, Y+3	; 0x03
    2440:	fc 01       	movw	r30, r24
    2442:	e2 0f       	add	r30, r18
    2444:	f3 1f       	adc	r31, r19
    2446:	80 81       	ld	r24, Z
    2448:	88 23       	and	r24, r24
    244a:	39 f7       	brne	.-50     	; 0x241a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	00 d0       	rcall	.+0      	; 0x2462 <UART_receiveString+0xa>
    2462:	0f 92       	push	r0
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	9b 83       	std	Y+3, r25	; 0x03
    246a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    246c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	9b 81       	ldd	r25, Y+3	; 0x03
    2478:	8c 01       	movw	r16, r24
    247a:	02 0f       	add	r16, r18
    247c:	13 1f       	adc	r17, r19
    247e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <UART_recieveByte>
    2482:	f8 01       	movw	r30, r16
    2484:	80 83       	st	Z, r24
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	8f 5f       	subi	r24, 0xFF	; 255
    248c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	9b 81       	ldd	r25, Y+3	; 0x03
    2498:	8c 01       	movw	r16, r24
    249a:	02 0f       	add	r16, r18
    249c:	13 1f       	adc	r17, r19
    249e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <UART_recieveByte>
    24a2:	f8 01       	movw	r30, r16
    24a4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	9b 81       	ldd	r25, Y+3	; 0x03
    24b0:	fc 01       	movw	r30, r24
    24b2:	e2 0f       	add	r30, r18
    24b4:	f3 1f       	adc	r31, r19
    24b6:	80 81       	ld	r24, Z
    24b8:	83 32       	cpi	r24, 0x23	; 35
    24ba:	31 f7       	brne	.-52     	; 0x2488 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	fc 01       	movw	r30, r24
    24c8:	e2 0f       	add	r30, r18
    24ca:	f3 1f       	adc	r31, r19
    24cc:	10 82       	st	Z, r1
}
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	08 95       	ret

000024de <__divmodhi4>:
    24de:	97 fb       	bst	r25, 7
    24e0:	09 2e       	mov	r0, r25
    24e2:	07 26       	eor	r0, r23
    24e4:	0a d0       	rcall	.+20     	; 0x24fa <__divmodhi4_neg1>
    24e6:	77 fd       	sbrc	r23, 7
    24e8:	04 d0       	rcall	.+8      	; 0x24f2 <__divmodhi4_neg2>
    24ea:	2e d0       	rcall	.+92     	; 0x2548 <__udivmodhi4>
    24ec:	06 d0       	rcall	.+12     	; 0x24fa <__divmodhi4_neg1>
    24ee:	00 20       	and	r0, r0
    24f0:	1a f4       	brpl	.+6      	; 0x24f8 <__divmodhi4_exit>

000024f2 <__divmodhi4_neg2>:
    24f2:	70 95       	com	r23
    24f4:	61 95       	neg	r22
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255

000024f8 <__divmodhi4_exit>:
    24f8:	08 95       	ret

000024fa <__divmodhi4_neg1>:
    24fa:	f6 f7       	brtc	.-4      	; 0x24f8 <__divmodhi4_exit>
    24fc:	90 95       	com	r25
    24fe:	81 95       	neg	r24
    2500:	9f 4f       	sbci	r25, 0xFF	; 255
    2502:	08 95       	ret

00002504 <__udivmodsi4>:
    2504:	a1 e2       	ldi	r26, 0x21	; 33
    2506:	1a 2e       	mov	r1, r26
    2508:	aa 1b       	sub	r26, r26
    250a:	bb 1b       	sub	r27, r27
    250c:	fd 01       	movw	r30, r26
    250e:	0d c0       	rjmp	.+26     	; 0x252a <__udivmodsi4_ep>

00002510 <__udivmodsi4_loop>:
    2510:	aa 1f       	adc	r26, r26
    2512:	bb 1f       	adc	r27, r27
    2514:	ee 1f       	adc	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	a2 17       	cp	r26, r18
    251a:	b3 07       	cpc	r27, r19
    251c:	e4 07       	cpc	r30, r20
    251e:	f5 07       	cpc	r31, r21
    2520:	20 f0       	brcs	.+8      	; 0x252a <__udivmodsi4_ep>
    2522:	a2 1b       	sub	r26, r18
    2524:	b3 0b       	sbc	r27, r19
    2526:	e4 0b       	sbc	r30, r20
    2528:	f5 0b       	sbc	r31, r21

0000252a <__udivmodsi4_ep>:
    252a:	66 1f       	adc	r22, r22
    252c:	77 1f       	adc	r23, r23
    252e:	88 1f       	adc	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	1a 94       	dec	r1
    2534:	69 f7       	brne	.-38     	; 0x2510 <__udivmodsi4_loop>
    2536:	60 95       	com	r22
    2538:	70 95       	com	r23
    253a:	80 95       	com	r24
    253c:	90 95       	com	r25
    253e:	9b 01       	movw	r18, r22
    2540:	ac 01       	movw	r20, r24
    2542:	bd 01       	movw	r22, r26
    2544:	cf 01       	movw	r24, r30
    2546:	08 95       	ret

00002548 <__udivmodhi4>:
    2548:	aa 1b       	sub	r26, r26
    254a:	bb 1b       	sub	r27, r27
    254c:	51 e1       	ldi	r21, 0x11	; 17
    254e:	07 c0       	rjmp	.+14     	; 0x255e <__udivmodhi4_ep>

00002550 <__udivmodhi4_loop>:
    2550:	aa 1f       	adc	r26, r26
    2552:	bb 1f       	adc	r27, r27
    2554:	a6 17       	cp	r26, r22
    2556:	b7 07       	cpc	r27, r23
    2558:	10 f0       	brcs	.+4      	; 0x255e <__udivmodhi4_ep>
    255a:	a6 1b       	sub	r26, r22
    255c:	b7 0b       	sbc	r27, r23

0000255e <__udivmodhi4_ep>:
    255e:	88 1f       	adc	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	5a 95       	dec	r21
    2564:	a9 f7       	brne	.-22     	; 0x2550 <__udivmodhi4_loop>
    2566:	80 95       	com	r24
    2568:	90 95       	com	r25
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	08 95       	ret

00002570 <__prologue_saves__>:
    2570:	2f 92       	push	r2
    2572:	3f 92       	push	r3
    2574:	4f 92       	push	r4
    2576:	5f 92       	push	r5
    2578:	6f 92       	push	r6
    257a:	7f 92       	push	r7
    257c:	8f 92       	push	r8
    257e:	9f 92       	push	r9
    2580:	af 92       	push	r10
    2582:	bf 92       	push	r11
    2584:	cf 92       	push	r12
    2586:	df 92       	push	r13
    2588:	ef 92       	push	r14
    258a:	ff 92       	push	r15
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	ca 1b       	sub	r28, r26
    259a:	db 0b       	sbc	r29, r27
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	09 94       	ijmp

000025a8 <__epilogue_restores__>:
    25a8:	2a 88       	ldd	r2, Y+18	; 0x12
    25aa:	39 88       	ldd	r3, Y+17	; 0x11
    25ac:	48 88       	ldd	r4, Y+16	; 0x10
    25ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    25b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    25b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    25b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    25b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    25ba:	b9 84       	ldd	r11, Y+9	; 0x09
    25bc:	c8 84       	ldd	r12, Y+8	; 0x08
    25be:	df 80       	ldd	r13, Y+7	; 0x07
    25c0:	ee 80       	ldd	r14, Y+6	; 0x06
    25c2:	fd 80       	ldd	r15, Y+5	; 0x05
    25c4:	0c 81       	ldd	r16, Y+4	; 0x04
    25c6:	1b 81       	ldd	r17, Y+3	; 0x03
    25c8:	aa 81       	ldd	r26, Y+2	; 0x02
    25ca:	b9 81       	ldd	r27, Y+1	; 0x01
    25cc:	ce 0f       	add	r28, r30
    25ce:	d1 1d       	adc	r29, r1
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	ed 01       	movw	r28, r26
    25dc:	08 95       	ret

000025de <_exit>:
    25de:	f8 94       	cli

000025e0 <__stop_program>:
    25e0:	ff cf       	rjmp	.-2      	; 0x25e0 <__stop_program>
