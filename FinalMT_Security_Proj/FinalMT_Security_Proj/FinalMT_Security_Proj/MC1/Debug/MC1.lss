
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000292a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  0000292a  000029be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000e6  008000e6  00002a44  2**0
                  ALLOC
  3 .stab         00002724  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001287  00000000  00000000  00005168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000652f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000669f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000091d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 11 	call	0x236e	; 0x236e <main>
      8a:	0c 94 93 14 	jmp	0x2926	; 0x2926 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 17 14 	jmp	0x282e	; 0x282e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ed       	ldi	r26, 0xD0	; 208
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 17 14 	jmp	0x282e	; 0x282e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <__vector_7>:
************************************************************************************/


/* If Compare Mode is used, ISR handles the callback*/
ISR(TIMER1_COMPA_vect)
{
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    11ec:	80 91 e6 00 	lds	r24, 0x00E6
    11f0:	90 91 e7 00 	lds	r25, 0x00E7
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	29 f0       	breq	.+10     	; 0x1202 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    11f8:	e0 91 e6 00 	lds	r30, 0x00E6
    11fc:	f0 91 e7 00 	lds	r31, 0x00E7
    1200:	09 95       	icall
	}
}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_9>:


/* If Overflow Mode is used, ISR handles the callback*/
ISR(TIMER1_OVF_vect)
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1252:	80 91 e6 00 	lds	r24, 0x00E6
    1256:	90 91 e7 00 	lds	r25, 0x00E7
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	29 f0       	breq	.+10     	; 0x1268 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    125e:	e0 91 e6 00 	lds	r30, 0x00E6
    1262:	f0 91 e7 00 	lds	r31, 0x00E7
    1266:	09 95       	icall
	}
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <Timer1_init>:


void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <Timer1_init+0x6>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
	/* FOC1A , FOC1B are active as we use a non-PWM mode*/
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    129c:	ef e4       	ldi	r30, 0x4F	; 79
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8c e0       	ldi	r24, 0x0C	; 12
    12a2:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler & (0x07));
    12a4:	ae e4       	ldi	r26, 0x4E	; 78
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	ee e4       	ldi	r30, 0x4E	; 78
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	98 2f       	mov	r25, r24
    12b0:	98 7f       	andi	r25, 0xF8	; 248
    12b2:	e9 81       	ldd	r30, Y+1	; 0x01
    12b4:	fa 81       	ldd	r31, Y+2	; 0x02
    12b6:	85 81       	ldd	r24, Z+5	; 0x05
    12b8:	87 70       	andi	r24, 0x07	; 7
    12ba:	89 2b       	or	r24, r25
    12bc:	8c 93       	st	X, r24
	TCCR1B |= ((Config_Ptr->mode)>>2)<<3;
    12be:	ae e4       	ldi	r26, 0x4E	; 78
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ee e4       	ldi	r30, 0x4E	; 78
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	28 2f       	mov	r18, r24
    12ca:	e9 81       	ldd	r30, Y+1	; 0x01
    12cc:	fa 81       	ldd	r31, Y+2	; 0x02
    12ce:	80 81       	ld	r24, Z
    12d0:	86 95       	lsr	r24
    12d2:	86 95       	lsr	r24
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	82 2b       	or	r24, r18
    12e6:	8c 93       	st	X, r24
	TCCR1A |= ((Config_Ptr->mode)&(0x03));
    12e8:	af e4       	ldi	r26, 0x4F	; 79
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ef e4       	ldi	r30, 0x4F	; 79
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	98 2f       	mov	r25, r24
    12f4:	e9 81       	ldd	r30, Y+1	; 0x01
    12f6:	fa 81       	ldd	r31, Y+2	; 0x02
    12f8:	80 81       	ld	r24, Z
    12fa:	83 70       	andi	r24, 0x03	; 3
    12fc:	89 2b       	or	r24, r25
    12fe:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    1300:	ac e4       	ldi	r26, 0x4C	; 76
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 81       	ldd	r30, Y+1	; 0x01
    1306:	fa 81       	ldd	r31, Y+2	; 0x02
    1308:	81 81       	ldd	r24, Z+1	; 0x01
    130a:	92 81       	ldd	r25, Z+2	; 0x02
    130c:	11 96       	adiw	r26, 0x01	; 1
    130e:	9c 93       	st	X, r25
    1310:	8e 93       	st	-X, r24

	if( Config_Ptr-> mode == compare)
    1312:	e9 81       	ldd	r30, Y+1	; 0x01
    1314:	fa 81       	ldd	r31, Y+2	; 0x02
    1316:	80 81       	ld	r24, Z
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	71 f4       	brne	.+28     	; 0x1338 <Timer1_init+0xaa>
	{
		OCR1A = Config_Ptr->compare_value;
    131c:	aa e4       	ldi	r26, 0x4A	; 74
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e9 81       	ldd	r30, Y+1	; 0x01
    1322:	fa 81       	ldd	r31, Y+2	; 0x02
    1324:	83 81       	ldd	r24, Z+3	; 0x03
    1326:	94 81       	ldd	r25, Z+4	; 0x04
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	9c 93       	st	X, r25
    132c:	8e 93       	st	-X, r24
		TIMSK = (1<< OCIE1A);
    132e:	e9 e5       	ldi	r30, 0x59	; 89
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 e1       	ldi	r24, 0x10	; 16
    1334:	80 83       	st	Z, r24
    1336:	09 c0       	rjmp	.+18     	; 0x134a <Timer1_init+0xbc>
	}
	else if(Config_Ptr-> mode == normal)
    1338:	e9 81       	ldd	r30, Y+1	; 0x01
    133a:	fa 81       	ldd	r31, Y+2	; 0x02
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	21 f4       	brne	.+8      	; 0x134a <Timer1_init+0xbc>
	{
		TIMSK = (1<< TOIE1);
    1342:	e9 e5       	ldi	r30, 0x59	; 89
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	80 83       	st	Z, r24
	}

}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <Timer1_deInit>:
void Timer1_deInit(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	/* clear all TIMER1 registers */
	TIMSK = 0;
    135c:	e9 e5       	ldi	r30, 0x59	; 89
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	10 82       	st	Z, r1
	TCNT1 = 0;
    1362:	ec e4       	ldi	r30, 0x4C	; 76
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	11 82       	std	Z+1, r1	; 0x01
    1368:	10 82       	st	Z, r1
	TCCR1A = 0;
    136a:	ef e4       	ldi	r30, 0x4F	; 79
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	10 82       	st	Z, r1
	TCCR1B = 0;
    1370:	ee e4       	ldi	r30, 0x4E	; 78
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	10 82       	st	Z, r1
	OCR1A = 0;
    1376:	ea e4       	ldi	r30, 0x4A	; 74
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	11 82       	std	Z+1, r1	; 0x01
    137c:	10 82       	st	Z, r1
}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <Timer1_setCallBack+0x6>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	90 93 e7 00 	sts	0x00E7, r25
    139a:	80 93 e6 00 	sts	0x00E6, r24
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	60 97       	sbiw	r28, 0x10	; 16
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	de bf       	out	0x3e, r29	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	64 e0       	ldi	r22, 0x04	; 4
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	65 e0       	ldi	r22, 0x05	; 5
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	66 e0       	ldi	r22, 0x06	; 6
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	67 e0       	ldi	r22, 0x07	; 7
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    140c:	1f 86       	std	Y+15, r1	; 0x0f
    140e:	ab c0       	rjmp	.+342    	; 0x1566 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	6f 85       	ldd	r22, Y+15	; 0x0f
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	6f 85       	ldd	r22, Y+15	; 0x0f
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1424:	18 8a       	std	Y+16, r1	; 0x10
    1426:	22 c0       	rjmp	.+68     	; 0x146c <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1428:	88 89       	ldd	r24, Y+16	; 0x10
    142a:	98 2f       	mov	r25, r24
    142c:	9c 5f       	subi	r25, 0xFC	; 252
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	69 2f       	mov	r22, r25
    1432:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1436:	88 23       	and	r24, r24
    1438:	b1 f4       	brne	.+44     	; 0x1466 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    143a:	8f 85       	ldd	r24, Y+15	; 0x0f
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	98 2f       	mov	r25, r24
    144a:	88 89       	ldd	r24, Y+16	; 0x10
    144c:	89 0f       	add	r24, r25
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	0e 94 b8 0a 	call	0x1570	; 0x1570 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1454:	60 96       	adiw	r28, 0x10	; 16
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1466:	88 89       	ldd	r24, Y+16	; 0x10
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	88 8b       	std	Y+16, r24	; 0x10
    146c:	88 89       	ldd	r24, Y+16	; 0x10
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	d8 f2       	brcs	.-74     	; 0x1428 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	6f 85       	ldd	r22, Y+15	; 0x0f
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 ea       	ldi	r26, 0xA0	; 160
    1482:	b0 e4       	ldi	r27, 0x40	; 64
    1484:	8b 87       	std	Y+11, r24	; 0x0b
    1486:	9c 87       	std	Y+12, r25	; 0x0c
    1488:	ad 87       	std	Y+13, r26	; 0x0d
    148a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    148c:	6b 85       	ldd	r22, Y+11	; 0x0b
    148e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1490:	8d 85       	ldd	r24, Y+13	; 0x0d
    1492:	9e 85       	ldd	r25, Y+14	; 0x0e
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a ef       	ldi	r20, 0xFA	; 250
    149a:	54 e4       	ldi	r21, 0x44	; 68
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8f 83       	std	Y+7, r24	; 0x07
    14a6:	98 87       	std	Y+8, r25	; 0x08
    14a8:	a9 87       	std	Y+9, r26	; 0x09
    14aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ac:	6f 81       	ldd	r22, Y+7	; 0x07
    14ae:	78 85       	ldd	r23, Y+8	; 0x08
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	2c f4       	brge	.+10     	; 0x14ce <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	3f c0       	rjmp	.+126    	; 0x154c <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    14ce:	6f 81       	ldd	r22, Y+7	; 0x07
    14d0:	78 85       	ldd	r23, Y+8	; 0x08
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	3f ef       	ldi	r19, 0xFF	; 255
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	57 e4       	ldi	r21, 0x47	; 71
    14de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	4c f5       	brge	.+82     	; 0x1538 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e2       	ldi	r20, 0x20	; 32
    14f4:	51 e4       	ldi	r21, 0x41	; 65
    14f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	0f c0       	rjmp	.+30     	; 0x152e <KEYPAD_getPressedKey+0x186>
    1510:	88 ec       	ldi	r24, 0xC8	; 200
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <KEYPAD_getPressedKey+0x174>
    1520:	9c 83       	std	Y+4, r25	; 0x04
    1522:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	69 f7       	brne	.-38     	; 0x1510 <KEYPAD_getPressedKey+0x168>
    1536:	14 c0       	rjmp	.+40     	; 0x1560 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1538:	6f 81       	ldd	r22, Y+7	; 0x07
    153a:	78 85       	ldd	r23, Y+8	; 0x08
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	9a 81       	ldd	r25, Y+2	; 0x02
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <KEYPAD_getPressedKey+0x1b0>
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1560:	8f 85       	ldd	r24, Y+15	; 0x0f
    1562:	8f 5f       	subi	r24, 0xFF	; 255
    1564:	8f 87       	std	Y+15, r24	; 0x0f
    1566:	8f 85       	ldd	r24, Y+15	; 0x0f
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	08 f4       	brcc	.+2      	; 0x156e <KEYPAD_getPressedKey+0x1c6>
    156c:	51 cf       	rjmp	.-350    	; 0x1410 <KEYPAD_getPressedKey+0x68>
    156e:	4e cf       	rjmp	.-356    	; 0x140c <KEYPAD_getPressedKey+0x64>

00001570 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    157e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3c 83       	std	Y+4, r19	; 0x04
    1588:	2b 83       	std	Y+3, r18	; 0x03
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	88 30       	cpi	r24, 0x08	; 8
    1590:	91 05       	cpc	r25, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1594:	70 c0       	rjmp	.+224    	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1596:	2b 81       	ldd	r18, Y+3	; 0x03
    1598:	3c 81       	ldd	r19, Y+4	; 0x04
    159a:	29 30       	cpi	r18, 0x09	; 9
    159c:	31 05       	cpc	r19, r1
    159e:	5c f5       	brge	.+86     	; 0x15f6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	91 05       	cpc	r25, r1
    15a8:	09 f4       	brne	.+2      	; 0x15ac <KEYPAD_4x4_adjustKeyNumber+0x3c>
    15aa:	59 c0       	rjmp	.+178    	; 0x165e <KEYPAD_4x4_adjustKeyNumber+0xee>
    15ac:	2b 81       	ldd	r18, Y+3	; 0x03
    15ae:	3c 81       	ldd	r19, Y+4	; 0x04
    15b0:	25 30       	cpi	r18, 0x05	; 5
    15b2:	31 05       	cpc	r19, r1
    15b4:	9c f4       	brge	.+38     	; 0x15dc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	91 05       	cpc	r25, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    15c0:	48 c0       	rjmp	.+144    	; 0x1652 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	23 30       	cpi	r18, 0x03	; 3
    15c8:	31 05       	cpc	r19, r1
    15ca:	0c f0       	brlt	.+2      	; 0x15ce <KEYPAD_4x4_adjustKeyNumber+0x5e>
    15cc:	45 c0       	rjmp	.+138    	; 0x1658 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	09 f4       	brne	.+2      	; 0x15da <KEYPAD_4x4_adjustKeyNumber+0x6a>
    15d8:	39 c0       	rjmp	.+114    	; 0x164c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    15da:	67 c0       	rjmp	.+206    	; 0x16aa <KEYPAD_4x4_adjustKeyNumber+0x13a>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	26 30       	cpi	r18, 0x06	; 6
    15e2:	31 05       	cpc	r19, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    15e6:	41 c0       	rjmp	.+130    	; 0x166a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	87 30       	cpi	r24, 0x07	; 7
    15ee:	91 05       	cpc	r25, r1
    15f0:	0c f0       	brlt	.+2      	; 0x15f4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    15f2:	3e c0       	rjmp	.+124    	; 0x1670 <KEYPAD_4x4_adjustKeyNumber+0x100>
    15f4:	37 c0       	rjmp	.+110    	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	2c 30       	cpi	r18, 0x0C	; 12
    15fc:	31 05       	cpc	r19, r1
    15fe:	09 f4       	brne	.+2      	; 0x1602 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1600:	46 c0       	rjmp	.+140    	; 0x168e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	8d 30       	cpi	r24, 0x0D	; 13
    1608:	91 05       	cpc	r25, r1
    160a:	5c f4       	brge	.+22     	; 0x1622 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	2a 30       	cpi	r18, 0x0A	; 10
    1612:	31 05       	cpc	r19, r1
    1614:	b1 f1       	breq	.+108    	; 0x1682 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	8b 30       	cpi	r24, 0x0B	; 11
    161c:	91 05       	cpc	r25, r1
    161e:	a4 f5       	brge	.+104    	; 0x1688 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1620:	2d c0       	rjmp	.+90     	; 0x167c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1622:	2b 81       	ldd	r18, Y+3	; 0x03
    1624:	3c 81       	ldd	r19, Y+4	; 0x04
    1626:	2e 30       	cpi	r18, 0x0E	; 14
    1628:	31 05       	cpc	r19, r1
    162a:	b9 f1       	breq	.+110    	; 0x169a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	8e 30       	cpi	r24, 0x0E	; 14
    1632:	91 05       	cpc	r25, r1
    1634:	7c f1       	brlt	.+94     	; 0x1694 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1636:	2b 81       	ldd	r18, Y+3	; 0x03
    1638:	3c 81       	ldd	r19, Y+4	; 0x04
    163a:	2f 30       	cpi	r18, 0x0F	; 15
    163c:	31 05       	cpc	r19, r1
    163e:	79 f1       	breq	.+94     	; 0x169e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	80 31       	cpi	r24, 0x10	; 16
    1646:	91 05       	cpc	r25, r1
    1648:	69 f1       	breq	.+90     	; 0x16a4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    164a:	2f c0       	rjmp	.+94     	; 0x16aa <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    164c:	87 e0       	ldi	r24, 0x07	; 7
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	2e c0       	rjmp	.+92     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1652:	88 e0       	ldi	r24, 0x08	; 8
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	2b c0       	rjmp	.+86     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1658:	89 e0       	ldi	r24, 0x09	; 9
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	28 c0       	rjmp	.+80     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    165e:	85 e2       	ldi	r24, 0x25	; 37
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	25 c0       	rjmp	.+74     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1664:	84 e0       	ldi	r24, 0x04	; 4
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	22 c0       	rjmp	.+68     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    166a:	85 e0       	ldi	r24, 0x05	; 5
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	1f c0       	rjmp	.+62     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1670:	86 e0       	ldi	r24, 0x06	; 6
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	1c c0       	rjmp	.+56     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1676:	8a e2       	ldi	r24, 0x2A	; 42
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	19 c0       	rjmp	.+50     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	16 c0       	rjmp	.+44     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	10 c0       	rjmp	.+32     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    168e:	8d e2       	ldi	r24, 0x2D	; 45
    1690:	89 83       	std	Y+1, r24	; 0x01
    1692:	0d c0       	rjmp	.+26     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1694:	8d e0       	ldi	r24, 0x0D	; 13
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	0a c0       	rjmp	.+20     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	08 c0       	rjmp	.+16     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    169e:	8d e3       	ldi	r24, 0x3D	; 61
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    16a4:	8b e2       	ldi	r24, 0x2B	; 43
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
} 
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	2e 97       	sbiw	r28, 0x0e	; 14
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	64 e0       	ldi	r22, 0x04	; 4
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	66 e0       	ldi	r22, 0x06	; 6
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a0 ea       	ldi	r26, 0xA0	; 160
    16ec:	b1 e4       	ldi	r27, 0x41	; 65
    16ee:	8b 87       	std	Y+11, r24	; 0x0b
    16f0:	9c 87       	std	Y+12, r25	; 0x0c
    16f2:	ad 87       	std	Y+13, r26	; 0x0d
    16f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a ef       	ldi	r20, 0xFA	; 250
    1704:	54 e4       	ldi	r21, 0x44	; 68
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8f 83       	std	Y+7, r24	; 0x07
    1710:	98 87       	std	Y+8, r25	; 0x08
    1712:	a9 87       	std	Y+9, r26	; 0x09
    1714:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1716:	6f 81       	ldd	r22, Y+7	; 0x07
    1718:	78 85       	ldd	r23, Y+8	; 0x08
    171a:	89 85       	ldd	r24, Y+9	; 0x09
    171c:	9a 85       	ldd	r25, Y+10	; 0x0a
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e8       	ldi	r20, 0x80	; 128
    1724:	5f e3       	ldi	r21, 0x3F	; 63
    1726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    172a:	88 23       	and	r24, r24
    172c:	2c f4       	brge	.+10     	; 0x1738 <LCD_init+0x7a>
		__ticks = 1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	3f c0       	rjmp	.+126    	; 0x17b6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1738:	6f 81       	ldd	r22, Y+7	; 0x07
    173a:	78 85       	ldd	r23, Y+8	; 0x08
    173c:	89 85       	ldd	r24, Y+9	; 0x09
    173e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	4c f5       	brge	.+82     	; 0x17a2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1750:	6b 85       	ldd	r22, Y+11	; 0x0b
    1752:	7c 85       	ldd	r23, Y+12	; 0x0c
    1754:	8d 85       	ldd	r24, Y+13	; 0x0d
    1756:	9e 85       	ldd	r25, Y+14	; 0x0e
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	40 e2       	ldi	r20, 0x20	; 32
    175e:	51 e4       	ldi	r21, 0x41	; 65
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <LCD_init+0xda>
    177a:	88 ec       	ldi	r24, 0xC8	; 200
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_init+0xc8>
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9e 83       	std	Y+6, r25	; 0x06
    1796:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	69 f7       	brne	.-38     	; 0x177a <LCD_init+0xbc>
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	6f 81       	ldd	r22, Y+7	; 0x07
    17a4:	78 85       	ldd	r23, Y+8	; 0x08
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <LCD_init+0x104>
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	6f ef       	ldi	r22, 0xFF	; 255
    17ce:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    17d2:	88 e3       	ldi	r24, 0x38	; 56
    17d4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    17d8:	8c e0       	ldi	r24, 0x0C	; 12
    17da:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCommand>
}
    17e4:	2e 96       	adiw	r28, 0x0e	; 14
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	e9 97       	sbiw	r28, 0x39	; 57
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e8       	ldi	r26, 0x80	; 128
    181c:	bf e3       	ldi	r27, 0x3F	; 63
    181e:	8d ab       	std	Y+53, r24	; 0x35
    1820:	9e ab       	std	Y+54, r25	; 0x36
    1822:	af ab       	std	Y+55, r26	; 0x37
    1824:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6d a9       	ldd	r22, Y+53	; 0x35
    1828:	7e a9       	ldd	r23, Y+54	; 0x36
    182a:	8f a9       	ldd	r24, Y+55	; 0x37
    182c:	98 ad       	ldd	r25, Y+56	; 0x38
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a ef       	ldi	r20, 0xFA	; 250
    1834:	54 e4       	ldi	r21, 0x44	; 68
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	89 ab       	std	Y+49, r24	; 0x31
    1840:	9a ab       	std	Y+50, r25	; 0x32
    1842:	ab ab       	std	Y+51, r26	; 0x33
    1844:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1846:	69 a9       	ldd	r22, Y+49	; 0x31
    1848:	7a a9       	ldd	r23, Y+50	; 0x32
    184a:	8b a9       	ldd	r24, Y+51	; 0x33
    184c:	9c a9       	ldd	r25, Y+52	; 0x34
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <LCD_sendCommand+0x72>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1868:	69 a9       	ldd	r22, Y+49	; 0x31
    186a:	7a a9       	ldd	r23, Y+50	; 0x32
    186c:	8b a9       	ldd	r24, Y+51	; 0x33
    186e:	9c a9       	ldd	r25, Y+52	; 0x34
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	6d a9       	ldd	r22, Y+53	; 0x35
    1882:	7e a9       	ldd	r23, Y+54	; 0x36
    1884:	8f a9       	ldd	r24, Y+55	; 0x37
    1886:	98 ad       	ldd	r25, Y+56	; 0x38
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	98 ab       	std	Y+48, r25	; 0x30
    18a6:	8f a7       	std	Y+47, r24	; 0x2f
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <LCD_sendCommand+0xd2>
    18aa:	88 ec       	ldi	r24, 0xC8	; 200
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9e a7       	std	Y+46, r25	; 0x2e
    18b0:	8d a7       	std	Y+45, r24	; 0x2d
    18b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    18b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <LCD_sendCommand+0xc0>
    18ba:	9e a7       	std	Y+46, r25	; 0x2e
    18bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c0:	98 a9       	ldd	r25, Y+48	; 0x30
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	98 ab       	std	Y+48, r25	; 0x30
    18c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ca:	98 a9       	ldd	r25, Y+48	; 0x30
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <LCD_sendCommand+0xb4>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	69 a9       	ldd	r22, Y+49	; 0x31
    18d4:	7a a9       	ldd	r23, Y+50	; 0x32
    18d6:	8b a9       	ldd	r24, Y+51	; 0x33
    18d8:	9c a9       	ldd	r25, Y+52	; 0x34
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	98 ab       	std	Y+48, r25	; 0x30
    18e4:	8f a7       	std	Y+47, r24	; 0x2f
    18e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ea:	9c a7       	std	Y+44, r25	; 0x2c
    18ec:	8b a7       	std	Y+43, r24	; 0x2b
    18ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_sendCommand+0xfc>
    18f6:	9c a7       	std	Y+44, r25	; 0x2c
    18f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	66 e0       	ldi	r22, 0x06	; 6
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e8       	ldi	r26, 0x80	; 128
    190a:	bf e3       	ldi	r27, 0x3F	; 63
    190c:	8f a3       	std	Y+39, r24	; 0x27
    190e:	98 a7       	std	Y+40, r25	; 0x28
    1910:	a9 a7       	std	Y+41, r26	; 0x29
    1912:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	6f a1       	ldd	r22, Y+39	; 0x27
    1916:	78 a5       	ldd	r23, Y+40	; 0x28
    1918:	89 a5       	ldd	r24, Y+41	; 0x29
    191a:	9a a5       	ldd	r25, Y+42	; 0x2a
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a ef       	ldi	r20, 0xFA	; 250
    1922:	54 e4       	ldi	r21, 0x44	; 68
    1924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8b a3       	std	Y+35, r24	; 0x23
    192e:	9c a3       	std	Y+36, r25	; 0x24
    1930:	ad a3       	std	Y+37, r26	; 0x25
    1932:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1934:	6b a1       	ldd	r22, Y+35	; 0x23
    1936:	7c a1       	ldd	r23, Y+36	; 0x24
    1938:	8d a1       	ldd	r24, Y+37	; 0x25
    193a:	9e a1       	ldd	r25, Y+38	; 0x26
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <LCD_sendCommand+0x160>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9a a3       	std	Y+34, r25	; 0x22
    1952:	89 a3       	std	Y+33, r24	; 0x21
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1956:	6b a1       	ldd	r22, Y+35	; 0x23
    1958:	7c a1       	ldd	r23, Y+36	; 0x24
    195a:	8d a1       	ldd	r24, Y+37	; 0x25
    195c:	9e a1       	ldd	r25, Y+38	; 0x26
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	6f a1       	ldd	r22, Y+39	; 0x27
    1970:	78 a5       	ldd	r23, Y+40	; 0x28
    1972:	89 a5       	ldd	r24, Y+41	; 0x29
    1974:	9a a5       	ldd	r25, Y+42	; 0x2a
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9a a3       	std	Y+34, r25	; 0x22
    1994:	89 a3       	std	Y+33, r24	; 0x21
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <LCD_sendCommand+0x1c0>
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	98 a3       	std	Y+32, r25	; 0x20
    199e:	8f 8f       	std	Y+31, r24	; 0x1f
    19a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19a2:	98 a1       	ldd	r25, Y+32	; 0x20
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <LCD_sendCommand+0x1ae>
    19a8:	98 a3       	std	Y+32, r25	; 0x20
    19aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	89 a1       	ldd	r24, Y+33	; 0x21
    19ae:	9a a1       	ldd	r25, Y+34	; 0x22
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9a a3       	std	Y+34, r25	; 0x22
    19b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	89 a1       	ldd	r24, Y+33	; 0x21
    19b8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <LCD_sendCommand+0x1a2>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	6b a1       	ldd	r22, Y+35	; 0x23
    19c2:	7c a1       	ldd	r23, Y+36	; 0x24
    19c4:	8d a1       	ldd	r24, Y+37	; 0x25
    19c6:	9e a1       	ldd	r25, Y+38	; 0x26
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9a a3       	std	Y+34, r25	; 0x22
    19d2:	89 a3       	std	Y+33, r24	; 0x21
    19d4:	89 a1       	ldd	r24, Y+33	; 0x21
    19d6:	9a a1       	ldd	r25, Y+34	; 0x22
    19d8:	9e 8f       	std	Y+30, r25	; 0x1e
    19da:	8d 8f       	std	Y+29, r24	; 0x1d
    19dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_sendCommand+0x1ea>
    19e4:	9e 8f       	std	Y+30, r25	; 0x1e
    19e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	69 ad       	ldd	r22, Y+57	; 0x39
    19ec:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 e8       	ldi	r26, 0x80	; 128
    19f6:	bf e3       	ldi	r27, 0x3F	; 63
    19f8:	89 8f       	std	Y+25, r24	; 0x19
    19fa:	9a 8f       	std	Y+26, r25	; 0x1a
    19fc:	ab 8f       	std	Y+27, r26	; 0x1b
    19fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a00:	69 8d       	ldd	r22, Y+25	; 0x19
    1a02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a ef       	ldi	r20, 0xFA	; 250
    1a0e:	54 e4       	ldi	r21, 0x44	; 68
    1a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	8d 8b       	std	Y+21, r24	; 0x15
    1a1a:	9e 8b       	std	Y+22, r25	; 0x16
    1a1c:	af 8b       	std	Y+23, r26	; 0x17
    1a1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a20:	6d 89       	ldd	r22, Y+21	; 0x15
    1a22:	7e 89       	ldd	r23, Y+22	; 0x16
    1a24:	8f 89       	ldd	r24, Y+23	; 0x17
    1a26:	98 8d       	ldd	r25, Y+24	; 0x18
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e8       	ldi	r20, 0x80	; 128
    1a2e:	5f e3       	ldi	r21, 0x3F	; 63
    1a30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a34:	88 23       	and	r24, r24
    1a36:	2c f4       	brge	.+10     	; 0x1a42 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	3f c0       	rjmp	.+126    	; 0x1ac0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a42:	6d 89       	ldd	r22, Y+21	; 0x15
    1a44:	7e 89       	ldd	r23, Y+22	; 0x16
    1a46:	8f 89       	ldd	r24, Y+23	; 0x17
    1a48:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	3f ef       	ldi	r19, 0xFF	; 255
    1a4e:	4f e7       	ldi	r20, 0x7F	; 127
    1a50:	57 e4       	ldi	r21, 0x47	; 71
    1a52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	4c f5       	brge	.+82     	; 0x1aac <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e2       	ldi	r20, 0x20	; 32
    1a68:	51 e4       	ldi	r21, 0x41	; 65
    1a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <LCD_sendCommand+0x2ac>
    1a84:	88 ec       	ldi	r24, 0xC8	; 200
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9a 8b       	std	Y+18, r25	; 0x12
    1a8a:	89 8b       	std	Y+17, r24	; 0x11
    1a8c:	89 89       	ldd	r24, Y+17	; 0x11
    1a8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <LCD_sendCommand+0x29a>
    1a94:	9a 8b       	std	Y+18, r25	; 0x12
    1a96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a98:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	9c 8b       	std	Y+20, r25	; 0x14
    1aa0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	69 f7       	brne	.-38     	; 0x1a84 <LCD_sendCommand+0x28e>
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	6d 89       	ldd	r22, Y+21	; 0x15
    1aae:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
    1ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac4:	98 8b       	std	Y+16, r25	; 0x10
    1ac6:	8f 87       	std	Y+15, r24	; 0x0f
    1ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aca:	98 89       	ldd	r25, Y+16	; 0x10
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_sendCommand+0x2d6>
    1ad0:	98 8b       	std	Y+16, r25	; 0x10
    1ad2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	66 e0       	ldi	r22, 0x06	; 6
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e8       	ldi	r26, 0x80	; 128
    1ae4:	bf e3       	ldi	r27, 0x3F	; 63
    1ae6:	8b 87       	std	Y+11, r24	; 0x0b
    1ae8:	9c 87       	std	Y+12, r25	; 0x0c
    1aea:	ad 87       	std	Y+13, r26	; 0x0d
    1aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4a ef       	ldi	r20, 0xFA	; 250
    1afc:	54 e4       	ldi	r21, 0x44	; 68
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8f 83       	std	Y+7, r24	; 0x07
    1b08:	98 87       	std	Y+8, r25	; 0x08
    1b0a:	a9 87       	std	Y+9, r26	; 0x09
    1b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1b30:	6f 81       	ldd	r22, Y+7	; 0x07
    1b32:	78 85       	ldd	r23, Y+8	; 0x08
    1b34:	89 85       	ldd	r24, Y+9	; 0x09
    1b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	4f e7       	ldi	r20, 0x7F	; 127
    1b3e:	57 e4       	ldi	r21, 0x47	; 71
    1b40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	4c f5       	brge	.+82     	; 0x1b9a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <LCD_sendCommand+0x39a>
    1b72:	88 ec       	ldi	r24, 0xC8	; 200
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9c 83       	std	Y+4, r25	; 0x04
    1b78:	8b 83       	std	Y+3, r24	; 0x03
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_sendCommand+0x388>
    1b82:	9c 83       	std	Y+4, r25	; 0x04
    1b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <LCD_sendCommand+0x37c>
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9c:	78 85       	ldd	r23, Y+8	; 0x08
    1b9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_sendCommand+0x3c4>
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1bc2:	e9 96       	adiw	r28, 0x39	; 57
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	e9 97       	sbiw	r28, 0x39	; 57
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	64 e0       	ldi	r22, 0x04	; 4
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	a0 e8       	ldi	r26, 0x80	; 128
    1bfa:	bf e3       	ldi	r27, 0x3F	; 63
    1bfc:	8d ab       	std	Y+53, r24	; 0x35
    1bfe:	9e ab       	std	Y+54, r25	; 0x36
    1c00:	af ab       	std	Y+55, r26	; 0x37
    1c02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c04:	6d a9       	ldd	r22, Y+53	; 0x35
    1c06:	7e a9       	ldd	r23, Y+54	; 0x36
    1c08:	8f a9       	ldd	r24, Y+55	; 0x37
    1c0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	4a ef       	ldi	r20, 0xFA	; 250
    1c12:	54 e4       	ldi	r21, 0x44	; 68
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	89 ab       	std	Y+49, r24	; 0x31
    1c1e:	9a ab       	std	Y+50, r25	; 0x32
    1c20:	ab ab       	std	Y+51, r26	; 0x33
    1c22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c24:	69 a9       	ldd	r22, Y+49	; 0x31
    1c26:	7a a9       	ldd	r23, Y+50	; 0x32
    1c28:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	5f e3       	ldi	r21, 0x3F	; 63
    1c34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c38:	88 23       	and	r24, r24
    1c3a:	2c f4       	brge	.+10     	; 0x1c46 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	98 ab       	std	Y+48, r25	; 0x30
    1c42:	8f a7       	std	Y+47, r24	; 0x2f
    1c44:	3f c0       	rjmp	.+126    	; 0x1cc4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c46:	69 a9       	ldd	r22, Y+49	; 0x31
    1c48:	7a a9       	ldd	r23, Y+50	; 0x32
    1c4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	57 e4       	ldi	r21, 0x47	; 71
    1c56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	4c f5       	brge	.+82     	; 0x1cb0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c60:	7e a9       	ldd	r23, Y+54	; 0x36
    1c62:	8f a9       	ldd	r24, Y+55	; 0x37
    1c64:	98 ad       	ldd	r25, Y+56	; 0x38
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	98 ab       	std	Y+48, r25	; 0x30
    1c84:	8f a7       	std	Y+47, r24	; 0x2f
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <LCD_displayCharacter+0xd2>
    1c88:	88 ec       	ldi	r24, 0xC8	; 200
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	9e a7       	std	Y+46, r25	; 0x2e
    1c8e:	8d a7       	std	Y+45, r24	; 0x2d
    1c90:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c92:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_displayCharacter+0xc0>
    1c98:	9e a7       	std	Y+46, r25	; 0x2e
    1c9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	98 ab       	std	Y+48, r25	; 0x30
    1ca4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca8:	98 a9       	ldd	r25, Y+48	; 0x30
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	69 f7       	brne	.-38     	; 0x1c88 <LCD_displayCharacter+0xb4>
    1cae:	14 c0       	rjmp	.+40     	; 0x1cd8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	98 ab       	std	Y+48, r25	; 0x30
    1cc2:	8f a7       	std	Y+47, r24	; 0x2f
    1cc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc8:	9c a7       	std	Y+44, r25	; 0x2c
    1cca:	8b a7       	std	Y+43, r24	; 0x2b
    1ccc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cce:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <LCD_displayCharacter+0xfc>
    1cd4:	9c a7       	std	Y+44, r25	; 0x2c
    1cd6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	66 e0       	ldi	r22, 0x06	; 6
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e8       	ldi	r26, 0x80	; 128
    1ce8:	bf e3       	ldi	r27, 0x3F	; 63
    1cea:	8f a3       	std	Y+39, r24	; 0x27
    1cec:	98 a7       	std	Y+40, r25	; 0x28
    1cee:	a9 a7       	std	Y+41, r26	; 0x29
    1cf0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a ef       	ldi	r20, 0xFA	; 250
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	8b a3       	std	Y+35, r24	; 0x23
    1d0c:	9c a3       	std	Y+36, r25	; 0x24
    1d0e:	ad a3       	std	Y+37, r26	; 0x25
    1d10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d12:	6b a1       	ldd	r22, Y+35	; 0x23
    1d14:	7c a1       	ldd	r23, Y+36	; 0x24
    1d16:	8d a1       	ldd	r24, Y+37	; 0x25
    1d18:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9a a3       	std	Y+34, r25	; 0x22
    1d30:	89 a3       	std	Y+33, r24	; 0x21
    1d32:	3f c0       	rjmp	.+126    	; 0x1db2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d34:	6b a1       	ldd	r22, Y+35	; 0x23
    1d36:	7c a1       	ldd	r23, Y+36	; 0x24
    1d38:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	4c f5       	brge	.+82     	; 0x1d9e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d50:	89 a5       	ldd	r24, Y+41	; 0x29
    1d52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9a a3       	std	Y+34, r25	; 0x22
    1d72:	89 a3       	std	Y+33, r24	; 0x21
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <LCD_displayCharacter+0x1c0>
    1d76:	88 ec       	ldi	r24, 0xC8	; 200
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	98 a3       	std	Y+32, r25	; 0x20
    1d7c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d80:	98 a1       	ldd	r25, Y+32	; 0x20
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_displayCharacter+0x1ae>
    1d86:	98 a3       	std	Y+32, r25	; 0x20
    1d88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	9a a3       	std	Y+34, r25	; 0x22
    1d92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	89 a1       	ldd	r24, Y+33	; 0x21
    1d96:	9a a1       	ldd	r25, Y+34	; 0x22
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <LCD_displayCharacter+0x1a2>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1da0:	7c a1       	ldd	r23, Y+36	; 0x24
    1da2:	8d a1       	ldd	r24, Y+37	; 0x25
    1da4:	9e a1       	ldd	r25, Y+38	; 0x26
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9a a3       	std	Y+34, r25	; 0x22
    1db0:	89 a3       	std	Y+33, r24	; 0x21
    1db2:	89 a1       	ldd	r24, Y+33	; 0x21
    1db4:	9a a1       	ldd	r25, Y+34	; 0x22
    1db6:	9e 8f       	std	Y+30, r25	; 0x1e
    1db8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_displayCharacter+0x1ea>
    1dc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	69 ad       	ldd	r22, Y+57	; 0x39
    1dca:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	a0 e8       	ldi	r26, 0x80	; 128
    1dd4:	bf e3       	ldi	r27, 0x3F	; 63
    1dd6:	89 8f       	std	Y+25, r24	; 0x19
    1dd8:	9a 8f       	std	Y+26, r25	; 0x1a
    1dda:	ab 8f       	std	Y+27, r26	; 0x1b
    1ddc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dde:	69 8d       	ldd	r22, Y+25	; 0x19
    1de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	4a ef       	ldi	r20, 0xFA	; 250
    1dec:	54 e4       	ldi	r21, 0x44	; 68
    1dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	8d 8b       	std	Y+21, r24	; 0x15
    1df8:	9e 8b       	std	Y+22, r25	; 0x16
    1dfa:	af 8b       	std	Y+23, r26	; 0x17
    1dfc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1e00:	7e 89       	ldd	r23, Y+22	; 0x16
    1e02:	8f 89       	ldd	r24, Y+23	; 0x17
    1e04:	98 8d       	ldd	r25, Y+24	; 0x18
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	2c f4       	brge	.+10     	; 0x1e20 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c 8b       	std	Y+20, r25	; 0x14
    1e1c:	8b 8b       	std	Y+19, r24	; 0x13
    1e1e:	3f c0       	rjmp	.+126    	; 0x1e9e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e20:	6d 89       	ldd	r22, Y+21	; 0x15
    1e22:	7e 89       	ldd	r23, Y+22	; 0x16
    1e24:	8f 89       	ldd	r24, Y+23	; 0x17
    1e26:	98 8d       	ldd	r25, Y+24	; 0x18
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	4c f5       	brge	.+82     	; 0x1e8a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e38:	69 8d       	ldd	r22, Y+25	; 0x19
    1e3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e2       	ldi	r20, 0x20	; 32
    1e46:	51 e4       	ldi	r21, 0x41	; 65
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	bc 01       	movw	r22, r24
    1e52:	cd 01       	movw	r24, r26
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9c 8b       	std	Y+20, r25	; 0x14
    1e5e:	8b 8b       	std	Y+19, r24	; 0x13
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <LCD_displayCharacter+0x2ac>
    1e62:	88 ec       	ldi	r24, 0xC8	; 200
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9a 8b       	std	Y+18, r25	; 0x12
    1e68:	89 8b       	std	Y+17, r24	; 0x11
    1e6a:	89 89       	ldd	r24, Y+17	; 0x11
    1e6c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_displayCharacter+0x29a>
    1e72:	9a 8b       	std	Y+18, r25	; 0x12
    1e74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	9c 8b       	std	Y+20, r25	; 0x14
    1e7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e80:	8b 89       	ldd	r24, Y+19	; 0x13
    1e82:	9c 89       	ldd	r25, Y+20	; 0x14
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	69 f7       	brne	.-38     	; 0x1e62 <LCD_displayCharacter+0x28e>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e90:	98 8d       	ldd	r25, Y+24	; 0x18
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9c 8b       	std	Y+20, r25	; 0x14
    1e9c:	8b 8b       	std	Y+19, r24	; 0x13
    1e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea2:	98 8b       	std	Y+16, r25	; 0x10
    1ea4:	8f 87       	std	Y+15, r24	; 0x0f
    1ea6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea8:	98 89       	ldd	r25, Y+16	; 0x10
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	f1 f7       	brne	.-4      	; 0x1eaa <LCD_displayCharacter+0x2d6>
    1eae:	98 8b       	std	Y+16, r25	; 0x10
    1eb0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	66 e0       	ldi	r22, 0x06	; 6
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e8       	ldi	r26, 0x80	; 128
    1ec2:	bf e3       	ldi	r27, 0x3F	; 63
    1ec4:	8b 87       	std	Y+11, r24	; 0x0b
    1ec6:	9c 87       	std	Y+12, r25	; 0x0c
    1ec8:	ad 87       	std	Y+13, r26	; 0x0d
    1eca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a ef       	ldi	r20, 0xFA	; 250
    1eda:	54 e4       	ldi	r21, 0x44	; 68
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	8f 83       	std	Y+7, r24	; 0x07
    1ee6:	98 87       	std	Y+8, r25	; 0x08
    1ee8:	a9 87       	std	Y+9, r26	; 0x09
    1eea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eec:	6f 81       	ldd	r22, Y+7	; 0x07
    1eee:	78 85       	ldd	r23, Y+8	; 0x08
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	4c f5       	brge	.+82     	; 0x1f78 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9e 83       	std	Y+6, r25	; 0x06
    1f4c:	8d 83       	std	Y+5, r24	; 0x05
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <LCD_displayCharacter+0x39a>
    1f50:	88 ec       	ldi	r24, 0xC8	; 200
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	8b 83       	std	Y+3, r24	; 0x03
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_displayCharacter+0x388>
    1f60:	9c 83       	std	Y+4, r25	; 0x04
    1f62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	69 f7       	brne	.-38     	; 0x1f50 <LCD_displayCharacter+0x37c>
    1f76:	14 c0       	rjmp	.+40     	; 0x1fa0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f78:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7a:	78 85       	ldd	r23, Y+8	; 0x08
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_displayCharacter+0x3c4>
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1fa0:	e9 96       	adiw	r28, 0x39	; 57
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <LCD_displayString+0x6>
    1fb8:	0f 92       	push	r0
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	9b 83       	std	Y+3, r25	; 0x03
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fc2:	19 82       	std	Y+1, r1	; 0x01
    1fc4:	0e c0       	rjmp	.+28     	; 0x1fe2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	e2 0f       	add	r30, r18
    1fd4:	f3 1f       	adc	r31, r19
    1fd6:	80 81       	ld	r24, Z
    1fd8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayCharacter>
		i++;
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	8f 5f       	subi	r24, 0xFF	; 255
    1fe0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	9b 81       	ldd	r25, Y+3	; 0x03
    1fec:	fc 01       	movw	r30, r24
    1fee:	e2 0f       	add	r30, r18
    1ff0:	f3 1f       	adc	r31, r19
    1ff2:	80 81       	ld	r24, Z
    1ff4:	88 23       	and	r24, r24
    1ff6:	39 f7       	brne	.-50     	; 0x1fc6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <LCD_moveCursor+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <LCD_moveCursor+0x8>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	3d 83       	std	Y+5, r19	; 0x05
    201e:	2c 83       	std	Y+4, r18	; 0x04
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	9d 81       	ldd	r25, Y+5	; 0x05
    2024:	81 30       	cpi	r24, 0x01	; 1
    2026:	91 05       	cpc	r25, r1
    2028:	c1 f0       	breq	.+48     	; 0x205a <LCD_moveCursor+0x56>
    202a:	2c 81       	ldd	r18, Y+4	; 0x04
    202c:	3d 81       	ldd	r19, Y+5	; 0x05
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	31 05       	cpc	r19, r1
    2032:	2c f4       	brge	.+10     	; 0x203e <LCD_moveCursor+0x3a>
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	9d 81       	ldd	r25, Y+5	; 0x05
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	61 f0       	breq	.+24     	; 0x2054 <LCD_moveCursor+0x50>
    203c:	19 c0       	rjmp	.+50     	; 0x2070 <LCD_moveCursor+0x6c>
    203e:	2c 81       	ldd	r18, Y+4	; 0x04
    2040:	3d 81       	ldd	r19, Y+5	; 0x05
    2042:	22 30       	cpi	r18, 0x02	; 2
    2044:	31 05       	cpc	r19, r1
    2046:	69 f0       	breq	.+26     	; 0x2062 <LCD_moveCursor+0x5e>
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	9d 81       	ldd	r25, Y+5	; 0x05
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	91 05       	cpc	r25, r1
    2050:	61 f0       	breq	.+24     	; 0x206a <LCD_moveCursor+0x66>
    2052:	0e c0       	rjmp	.+28     	; 0x2070 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	0b c0       	rjmp	.+22     	; 0x2070 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	80 5c       	subi	r24, 0xC0	; 192
    205e:	89 83       	std	Y+1, r24	; 0x01
    2060:	07 c0       	rjmp	.+14     	; 0x2070 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	80 5f       	subi	r24, 0xF0	; 240
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	03 c0       	rjmp	.+6      	; 0x2070 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	80 5b       	subi	r24, 0xB0	; 176
    206e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	80 68       	ori	r24, 0x80	; 128
    2074:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCommand>
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <LCD_displayStringRowColumn+0x6>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <LCD_displayStringRowColumn+0x8>
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	6a 83       	std	Y+2, r22	; 0x02
    2098:	5c 83       	std	Y+4, r21	; 0x04
    209a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	6a 81       	ldd	r22, Y+2	; 0x02
    20a0:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	62 97       	sbiw	r28, 0x12	; 18
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	9a 8b       	std	Y+18, r25	; 0x12
    20d0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    20d2:	89 89       	ldd	r24, Y+17	; 0x11
    20d4:	9a 89       	ldd	r25, Y+18	; 0x12
    20d6:	9e 01       	movw	r18, r28
    20d8:	2f 5f       	subi	r18, 0xFF	; 255
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	b9 01       	movw	r22, r18
    20de:	4a e0       	ldi	r20, 0x0A	; 10
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	0e 94 4e 14 	call	0x289c	; 0x289c <itoa>
   LCD_displayString(buff); /* Display the string */
    20e6:	ce 01       	movw	r24, r28
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
}
    20ee:	62 96       	adiw	r28, 0x12	; 18
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <LCD_sendCommand>
}
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <Enter_password>:

/*
 *  Description : let the user enter the password
 */
void Enter_password(void)
{
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    211c:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
	LCD_displayString(" Enter pass: ");
    2128:	80 e6       	ldi	r24, 0x60	; 96
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
	LCD_moveCursor(1,0);
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
	Send_password();
    2138:	0e 94 b5 10 	call	0x216a	; 0x216a <Send_password>
	if(!g_flag)
    213c:	80 91 e8 00 	lds	r24, 0x00E8
    2140:	88 23       	and	r24, r24
    2142:	81 f4       	brne	.+32     	; 0x2164 <Enter_password+0x50>
	{ /* password not entered */
		LCD_clearScreen();
    2144:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
		LCD_displayString(" Re-enter pass: ");
    2150:	8e e6       	ldi	r24, 0x6E	; 110
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
		LCD_moveCursor(1,0);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
		Send_password();
    2160:	0e 94 b5 10 	call	0x216a	; 0x216a <Send_password>
	}
}
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <Send_password>:
/*
 * Description : send the password to MC2
 */

void Send_password(void)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	2f 97       	sbiw	r28, 0x0f	; 15
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
	uint8 key=0;
    217e:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		key=KEYPAD_getPressedKey();
    2180:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <KEYPAD_getPressedKey>
    2184:	8f 87       	std	Y+15, r24	; 0x0f
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a6 e9       	ldi	r26, 0x96	; 150
    218c:	b3 e4       	ldi	r27, 0x43	; 67
    218e:	8b 87       	std	Y+11, r24	; 0x0b
    2190:	9c 87       	std	Y+12, r25	; 0x0c
    2192:	ad 87       	std	Y+13, r26	; 0x0d
    2194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a ef       	ldi	r20, 0xFA	; 250
    21a4:	54 e4       	ldi	r21, 0x44	; 68
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8f 83       	std	Y+7, r24	; 0x07
    21b0:	98 87       	std	Y+8, r25	; 0x08
    21b2:	a9 87       	std	Y+9, r26	; 0x09
    21b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b6:	6f 81       	ldd	r22, Y+7	; 0x07
    21b8:	78 85       	ldd	r23, Y+8	; 0x08
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <Send_password+0x6e>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <Send_password+0xec>
	else if (__tmp > 65535)
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	78 85       	ldd	r23, Y+8	; 0x08
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <Send_password+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <Send_password+0xce>
    221a:	88 ec       	ldi	r24, 0xC8	; 200
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <Send_password+0xbc>
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <Send_password+0xb0>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <Send_password+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <Send_password+0xf8>
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		if(key == '=')
    226a:	8f 85       	ldd	r24, Y+15	; 0x0f
    226c:	8d 33       	cpi	r24, 0x3D	; 61
    226e:	61 f4       	brne	.+24     	; 0x2288 <Send_password+0x11e>
		{ /* enter is pressed*/
			UART_sendByte(key);
    2270:	8f 85       	ldd	r24, Y+15	; 0x0f
    2272:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_sendByte>
		{
			LCD_displayCharacter('*');
			UART_sendByte(key);
		}
	}
}
    2276:	2f 96       	adiw	r28, 0x0f	; 15
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret
		if(key == '=')
		{ /* enter is pressed*/
			UART_sendByte(key);
			break;
		}
		else if ((key >= 0) && (key <= 9))
    2288:	8f 85       	ldd	r24, Y+15	; 0x0f
    228a:	8a 30       	cpi	r24, 0x0A	; 10
    228c:	08 f0       	brcs	.+2      	; 0x2290 <Send_password+0x126>
    228e:	78 cf       	rjmp	.-272    	; 0x2180 <Send_password+0x16>
		{
			LCD_displayCharacter('*');
    2290:	8a e2       	ldi	r24, 0x2A	; 42
    2292:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayCharacter>
			UART_sendByte(key);
    2296:	8f 85       	ldd	r24, Y+15	; 0x0f
    2298:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_sendByte>
    229c:	71 cf       	rjmp	.-286    	; 0x2180 <Send_password+0x16>

0000229e <Check_password>:
	}
}
/*
 * Description : check on the password if it matches to the password in EEPROM or not
 */
uint8 Check_password(void){
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	0f 92       	push	r0
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
	uint8 byte=0;
    22a8:	19 82       	std	Y+1, r1	; 0x01
	byte = UART_recieveByte();
    22aa:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <UART_recieveByte>
    22ae:	89 83       	std	Y+1, r24	; 0x01
	return byte;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <Wrong_password>:
/*
 * Description :  Description : when you enter a wrong password
 */
void Wrong_password(void){
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    22c2:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
	LCD_displayString("WRONG PASSWORD!");
    22ce:	8f e7       	ldi	r24, 0x7F	; 127
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
	UART_sendByte(MAX_WRONG_ENTITIES);
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_sendByte>
	Timer1_wait(60);
    22dc:	8c e3       	ldi	r24, 0x3C	; 60
    22de:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timer1_wait>
}
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <OPEN_door>:
/*
 * Description : to open the door
 */
void OPEN_door(void){
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    22f0:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
	while(UART_recieveByte() != 0){/* wait until control ecu */}
    22fc:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <UART_recieveByte>
    2300:	88 23       	and	r24, r24
    2302:	e1 f7       	brne	.-8      	; 0x22fc <OPEN_door+0x14>
	LCD_displayString("Door is Unlocking");
    2304:	8f e8       	ldi	r24, 0x8F	; 143
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
	Timer1_wait(15);
    230c:	8f e0       	ldi	r24, 0x0F	; 15
    230e:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timer1_wait>
	LCD_clearScreen();
    2312:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clearScreen>
	Timer1_wait(3);
    2316:	83 e0       	ldi	r24, 0x03	; 3
    2318:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timer1_wait>
	LCD_clearScreen();
    231c:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clearScreen>
	LCD_displayString("Door is locking");
    2320:	81 ea       	ldi	r24, 0xA1	; 161
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
	Timer1_wait(15);
    2328:	8f e0       	ldi	r24, 0x0F	; 15
    232a:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timer1_wait>
	LCD_clearScreen();
    232e:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clearScreen>
}
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <Timer1_Inc>:
/*
 * Description :Increment the timer
 */
void Timer1_Inc(void){
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
    2340:	80 91 e9 00 	lds	r24, 0x00E9
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	80 93 e9 00 	sts	0x00E9, r24
}
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <Timer1_wait>:
/*
 * Description :wait for the required time
 */
void Timer1_wait(uint8 time){
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <Timer1_wait+0x6>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	89 83       	std	Y+1, r24	; 0x01
	g_sec=0;
    235c:	10 92 e9 00 	sts	0x00E9, r1
	if (g_sec < time){
    2360:	80 91 e9 00 	lds	r24, 0x00E9
		/* wait */
	}
}
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <main>:

int main(void)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	aa 97       	sbiw	r28, 0x2a	; 42
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
	uint8 key, false_count=0 , check_flag=0;
    2382:	18 8a       	std	Y+16, r1	; 0x10
    2384:	1f 86       	std	Y+15, r1	; 0x0f
	/* Enable the global interrupts*/
	SREG |= (1<<7);
    2386:	af e5       	ldi	r26, 0x5F	; 95
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	ef e5       	ldi	r30, 0x5F	; 95
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	80 68       	ori	r24, 0x80	; 128
    2392:	8c 93       	st	X, r24

	LCD_init();
    2394:	0e 94 5f 0b 	call	0x16be	; 0x16be <LCD_init>
	 /* initialize UART driver*/
	UART_ConfigType UART_Config ={eight_bits,disable,one_bit,baud_9600,asynch,on};
    2398:	9e 01       	movw	r18, r28
    239a:	2e 5e       	subi	r18, 0xEE	; 238
    239c:	3f 4f       	sbci	r19, 0xFF	; 255
    239e:	3a a3       	std	Y+34, r19	; 0x22
    23a0:	29 a3       	std	Y+33, r18	; 0x21
    23a2:	8e ed       	ldi	r24, 0xDE	; 222
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9c a3       	std	Y+36, r25	; 0x24
    23a8:	8b a3       	std	Y+35, r24	; 0x23
    23aa:	97 e0       	ldi	r25, 0x07	; 7
    23ac:	9d a3       	std	Y+37, r25	; 0x25
    23ae:	eb a1       	ldd	r30, Y+35	; 0x23
    23b0:	fc a1       	ldd	r31, Y+36	; 0x24
    23b2:	00 80       	ld	r0, Z
    23b4:	2b a1       	ldd	r18, Y+35	; 0x23
    23b6:	3c a1       	ldd	r19, Y+36	; 0x24
    23b8:	2f 5f       	subi	r18, 0xFF	; 255
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	3c a3       	std	Y+36, r19	; 0x24
    23be:	2b a3       	std	Y+35, r18	; 0x23
    23c0:	e9 a1       	ldd	r30, Y+33	; 0x21
    23c2:	fa a1       	ldd	r31, Y+34	; 0x22
    23c4:	00 82       	st	Z, r0
    23c6:	29 a1       	ldd	r18, Y+33	; 0x21
    23c8:	3a a1       	ldd	r19, Y+34	; 0x22
    23ca:	2f 5f       	subi	r18, 0xFF	; 255
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	3a a3       	std	Y+34, r19	; 0x22
    23d0:	29 a3       	std	Y+33, r18	; 0x21
    23d2:	3d a1       	ldd	r19, Y+37	; 0x25
    23d4:	31 50       	subi	r19, 0x01	; 1
    23d6:	3d a3       	std	Y+37, r19	; 0x25
    23d8:	8d a1       	ldd	r24, Y+37	; 0x25
    23da:	88 23       	and	r24, r24
    23dc:	41 f7       	brne	.-48     	; 0x23ae <main+0x40>
	UART_init(&UART_Config);
    23de:	ce 01       	movw	r24, r28
    23e0:	42 96       	adiw	r24, 0x12	; 18
    23e2:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <UART_init>
	/* initialize Timer driver*/
	Timer1_ConfigType Timer_Config = {compare,0,compare_value,clk_256};
    23e6:	fe 01       	movw	r30, r28
    23e8:	79 96       	adiw	r30, 0x19	; 25
    23ea:	ff a3       	std	Y+39, r31	; 0x27
    23ec:	ee a3       	std	Y+38, r30	; 0x26
    23ee:	28 ed       	ldi	r18, 0xD8	; 216
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	39 a7       	std	Y+41, r19	; 0x29
    23f4:	28 a7       	std	Y+40, r18	; 0x28
    23f6:	36 e0       	ldi	r19, 0x06	; 6
    23f8:	3a a7       	std	Y+42, r19	; 0x2a
    23fa:	e8 a5       	ldd	r30, Y+40	; 0x28
    23fc:	f9 a5       	ldd	r31, Y+41	; 0x29
    23fe:	00 80       	ld	r0, Z
    2400:	28 a5       	ldd	r18, Y+40	; 0x28
    2402:	39 a5       	ldd	r19, Y+41	; 0x29
    2404:	2f 5f       	subi	r18, 0xFF	; 255
    2406:	3f 4f       	sbci	r19, 0xFF	; 255
    2408:	39 a7       	std	Y+41, r19	; 0x29
    240a:	28 a7       	std	Y+40, r18	; 0x28
    240c:	ee a1       	ldd	r30, Y+38	; 0x26
    240e:	ff a1       	ldd	r31, Y+39	; 0x27
    2410:	00 82       	st	Z, r0
    2412:	2e a1       	ldd	r18, Y+38	; 0x26
    2414:	3f a1       	ldd	r19, Y+39	; 0x27
    2416:	2f 5f       	subi	r18, 0xFF	; 255
    2418:	3f 4f       	sbci	r19, 0xFF	; 255
    241a:	3f a3       	std	Y+39, r19	; 0x27
    241c:	2e a3       	std	Y+38, r18	; 0x26
    241e:	3a a5       	ldd	r19, Y+42	; 0x2a
    2420:	31 50       	subi	r19, 0x01	; 1
    2422:	3a a7       	std	Y+42, r19	; 0x2a
    2424:	8a a5       	ldd	r24, Y+42	; 0x2a
    2426:	88 23       	and	r24, r24
    2428:	41 f7       	brne	.-48     	; 0x23fa <main+0x8c>
	Timer1_init(&Timer_Config);
    242a:	ce 01       	movw	r24, r28
    242c:	49 96       	adiw	r24, 0x19	; 25
    242e:	0e 94 47 09 	call	0x128e	; 0x128e <Timer1_init>
	Timer1_setCallBack(Timer1_Inc);
    2432:	8c e9       	ldi	r24, 0x9C	; 156
    2434:	91 e1       	ldi	r25, 0x11	; 17
    2436:	0e 94 c2 09 	call	0x1384	; 0x1384 <Timer1_setCallBack>

	while(1)
	{
		if( g_flag == 0 )
    243a:	80 91 e8 00 	lds	r24, 0x00E8
    243e:	88 23       	and	r24, r24
    2440:	39 f4       	brne	.+14     	; 0x2450 <main+0xe2>
		{ /* password not set */
			Enter_password();
    2442:	0e 94 8a 10 	call	0x2114	; 0x2114 <Enter_password>
			/* check the password matched or not */
			g_flag=Check_password();
    2446:	0e 94 4f 11 	call	0x229e	; 0x229e <Check_password>
    244a:	80 93 e8 00 	sts	0x00E8, r24
    244e:	f5 cf       	rjmp	.-22     	; 0x243a <main+0xcc>
		}
		else if (g_flag == 1 )
    2450:	80 91 e8 00 	lds	r24, 0x00E8
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	89 f7       	brne	.-30     	; 0x243a <main+0xcc>
		{ /* password is set*/
			LCD_clearScreen();
    2458:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
			LCD_displayString("+ : open Door");
    2464:	81 eb       	ldi	r24, 0xB1	; 177
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
			LCD_moveCursor(1,0);
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_moveCursor>
			LCD_displayString("- : change pass ");
    2474:	8f eb       	ldi	r24, 0xBF	; 191
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <LCD_displayString>
			key = KEYPAD_getPressedKey();
    247c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <KEYPAD_getPressedKey>
    2480:	89 8b       	std	Y+17, r24	; 0x11
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a6 e9       	ldi	r26, 0x96	; 150
    2488:	b3 e4       	ldi	r27, 0x43	; 67
    248a:	8b 87       	std	Y+11, r24	; 0x0b
    248c:	9c 87       	std	Y+12, r25	; 0x0c
    248e:	ad 87       	std	Y+13, r26	; 0x0d
    2490:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	6b 85       	ldd	r22, Y+11	; 0x0b
    2494:	7c 85       	ldd	r23, Y+12	; 0x0c
    2496:	8d 85       	ldd	r24, Y+13	; 0x0d
    2498:	9e 85       	ldd	r25, Y+14	; 0x0e
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8f 83       	std	Y+7, r24	; 0x07
    24ac:	98 87       	std	Y+8, r25	; 0x08
    24ae:	a9 87       	std	Y+9, r26	; 0x09
    24b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24b2:	6f 81       	ldd	r22, Y+7	; 0x07
    24b4:	78 85       	ldd	r23, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e8       	ldi	r20, 0x80	; 128
    24c0:	5f e3       	ldi	r21, 0x3F	; 63
    24c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c6:	88 23       	and	r24, r24
    24c8:	2c f4       	brge	.+10     	; 0x24d4 <main+0x166>
		__ticks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	3f c0       	rjmp	.+126    	; 0x2552 <main+0x1e4>
	else if (__tmp > 65535)
    24d4:	6f 81       	ldd	r22, Y+7	; 0x07
    24d6:	78 85       	ldd	r23, Y+8	; 0x08
    24d8:	89 85       	ldd	r24, Y+9	; 0x09
    24da:	9a 85       	ldd	r25, Y+10	; 0x0a
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	4c f5       	brge	.+82     	; 0x253e <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	51 e4       	ldi	r21, 0x41	; 65
    24fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	0f c0       	rjmp	.+30     	; 0x2534 <main+0x1c6>
    2516:	88 ec       	ldi	r24, 0xC8	; 200
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	8b 83       	std	Y+3, r24	; 0x03
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <main+0x1b4>
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2534:	8d 81       	ldd	r24, Y+5	; 0x05
    2536:	9e 81       	ldd	r25, Y+6	; 0x06
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	69 f7       	brne	.-38     	; 0x2516 <main+0x1a8>
    253c:	14 c0       	rjmp	.+40     	; 0x2566 <main+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
    255a:	89 81       	ldd	r24, Y+1	; 0x01
    255c:	9a 81       	ldd	r25, Y+2	; 0x02
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <main+0x1f0>
    2562:	9a 83       	std	Y+2, r25	; 0x02
    2564:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			switch(key)
    2566:	89 89       	ldd	r24, Y+17	; 0x11
    2568:	e8 2f       	mov	r30, r24
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	f8 a3       	std	Y+32, r31	; 0x20
    256e:	ef 8f       	std	Y+31, r30	; 0x1f
    2570:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2572:	38 a1       	ldd	r19, Y+32	; 0x20
    2574:	2b 32       	cpi	r18, 0x2B	; 43
    2576:	31 05       	cpc	r19, r1
    2578:	31 f0       	breq	.+12     	; 0x2586 <main+0x218>
    257a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    257c:	98 a1       	ldd	r25, Y+32	; 0x20
    257e:	8d 32       	cpi	r24, 0x2D	; 45
    2580:	91 05       	cpc	r25, r1
    2582:	09 f1       	breq	.+66     	; 0x25c6 <main+0x258>
    2584:	5a cf       	rjmp	.-332    	; 0x243a <main+0xcc>
			{
			case '+': /* open the door */
				check_flag=0;
    2586:	1f 86       	std	Y+15, r1	; 0x0f
    2588:	1a c0       	rjmp	.+52     	; 0x25be <main+0x250>
				while(check_flag == 0)
				{
					/*send the + to MC2 */
					UART_sendByte(key);
    258a:	89 89       	ldd	r24, Y+17	; 0x11
    258c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_sendByte>
					Enter_password();
    2590:	0e 94 8a 10 	call	0x2114	; 0x2114 <Enter_password>
					check_flag=Check_password();
    2594:	0e 94 4f 11 	call	0x229e	; 0x229e <Check_password>
    2598:	8f 87       	std	Y+15, r24	; 0x0f
					if(check_flag == 1)
    259a:	8f 85       	ldd	r24, Y+15	; 0x0f
    259c:	81 30       	cpi	r24, 0x01	; 1
    259e:	19 f4       	brne	.+6      	; 0x25a6 <main+0x238>
					{
						OPEN_door();
    25a0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <OPEN_door>
    25a4:	0c c0       	rjmp	.+24     	; 0x25be <main+0x250>
					}
					else
					{
						false_count++;
    25a6:	88 89       	ldd	r24, Y+16	; 0x10
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	88 8b       	std	Y+16, r24	; 0x10
						/* send a wrong password */
						UART_sendByte(false_count);
    25ac:	88 89       	ldd	r24, Y+16	; 0x10
    25ae:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_sendByte>
						if (false_count == MAX_WRONG_ENTITIES)
    25b2:	88 89       	ldd	r24, Y+16	; 0x10
    25b4:	83 30       	cpi	r24, 0x03	; 3
    25b6:	19 f4       	brne	.+6      	; 0x25be <main+0x250>
						{
							Wrong_password();
    25b8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Wrong_password>
    25bc:	3e cf       	rjmp	.-388    	; 0x243a <main+0xcc>
			_delay_ms(300);
			switch(key)
			{
			case '+': /* open the door */
				check_flag=0;
				while(check_flag == 0)
    25be:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c0:	88 23       	and	r24, r24
    25c2:	19 f3       	breq	.-58     	; 0x258a <main+0x21c>
    25c4:	3a cf       	rjmp	.-396    	; 0x243a <main+0xcc>
				break;

				/* change password */
			case '-':
				/* send - to MC2 */
				UART_sendByte(key);
    25c6:	89 89       	ldd	r24, Y+17	; 0x11
    25c8:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_sendByte>
				/*password is not set */
				g_flag=0;
    25cc:	10 92 e8 00 	sts	0x00E8, r1
    25d0:	34 cf       	rjmp	.-408    	; 0x243a <main+0xcc>

000025d2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init( UART_ConfigType *Config_ptr)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <UART_init+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <UART_init+0x8>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    25e2:	1a 82       	std	Y+2, r1	; 0x02
    25e4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    25e6:	eb e2       	ldi	r30, 0x2B	; 43
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB =(1<<RXEN) | (1<<TXEN);
    25ee:	ea e2       	ldi	r30, 0x2A	; 42
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	88 e1       	ldi	r24, 0x18	; 24
    25f4:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_ptr->StopBit << 3 )  | ((Config_ptr->Bit_size&(3)) << 1) | (Config_ptr->Parity << 5);
    25f6:	a0 e4       	ldi	r26, 0x40	; 64
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	eb 81       	ldd	r30, Y+3	; 0x03
    25fc:	fc 81       	ldd	r31, Y+4	; 0x04
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	28 2f       	mov	r18, r24
    2612:	20 68       	ori	r18, 0x80	; 128
    2614:	eb 81       	ldd	r30, Y+3	; 0x03
    2616:	fc 81       	ldd	r31, Y+4	; 0x04
    2618:	80 81       	ld	r24, Z
    261a:	88 2f       	mov	r24, r24
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	83 70       	andi	r24, 0x03	; 3
    2620:	90 70       	andi	r25, 0x00	; 0
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	28 2b       	or	r18, r24
    2628:	eb 81       	ldd	r30, Y+3	; 0x03
    262a:	fc 81       	ldd	r31, Y+4	; 0x04
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	88 2f       	mov	r24, r24
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	82 95       	swap	r24
    2638:	92 95       	swap	r25
    263a:	90 7f       	andi	r25, 0xF0	; 240
    263c:	98 27       	eor	r25, r24
    263e:	80 7f       	andi	r24, 0xF0	; 240
    2640:	98 27       	eor	r25, r24
    2642:	82 2b       	or	r24, r18
    2644:	8c 93       	st	X, r24
	if (Config_ptr->Bit_size == nine_bits)
    2646:	eb 81       	ldd	r30, Y+3	; 0x03
    2648:	fc 81       	ldd	r31, Y+4	; 0x04
    264a:	80 81       	ld	r24, Z
    264c:	87 30       	cpi	r24, 0x07	; 7
    264e:	39 f4       	brne	.+14     	; 0x265e <UART_init+0x8c>
		{
			UCSRB |= (1<<UCSZ2);
    2650:	aa e2       	ldi	r26, 0x2A	; 42
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	ea e2       	ldi	r30, 0x2A	; 42
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	84 60       	ori	r24, 0x04	; 4
    265c:	8c 93       	st	X, r24
		}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_ptr->BaudRate * 8UL))) - 1);
    265e:	eb 81       	ldd	r30, Y+3	; 0x03
    2660:	fc 81       	ldd	r31, Y+4	; 0x04
    2662:	83 81       	ldd	r24, Z+3	; 0x03
    2664:	94 81       	ldd	r25, Z+4	; 0x04
    2666:	cc 01       	movw	r24, r24
    2668:	a0 e0       	ldi	r26, 0x00	; 0
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	aa 1f       	adc	r26, r26
    2672:	bb 1f       	adc	r27, r27
    2674:	88 0f       	add	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	aa 1f       	adc	r26, r26
    267a:	bb 1f       	adc	r27, r27
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	aa 1f       	adc	r26, r26
    2682:	bb 1f       	adc	r27, r27
    2684:	9c 01       	movw	r18, r24
    2686:	ad 01       	movw	r20, r26
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	92 e1       	ldi	r25, 0x12	; 18
    268c:	aa e7       	ldi	r26, 0x7A	; 122
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__udivmodsi4>
    2698:	da 01       	movw	r26, r20
    269a:	c9 01       	movw	r24, r18
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	9a 83       	std	Y+2, r25	; 0x02
    26a0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    26a2:	e0 e4       	ldi	r30, 0x40	; 64
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	89 2f       	mov	r24, r25
    26ac:	99 27       	eor	r25, r25
    26ae:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    26b0:	e9 e2       	ldi	r30, 0x29	; 41
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	80 83       	st	Z, r24
}
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	0f 92       	push	r0
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26d2:	eb e2       	ldi	r30, 0x2B	; 43
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	88 2f       	mov	r24, r24
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	80 72       	andi	r24, 0x20	; 32
    26de:	90 70       	andi	r25, 0x00	; 0
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	b9 f3       	breq	.-18     	; 0x26d2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    26e4:	ec e2       	ldi	r30, 0x2C	; 44
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    26ec:	0f 90       	pop	r0
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    26fc:	eb e2       	ldi	r30, 0x2B	; 43
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	88 23       	and	r24, r24
    2704:	dc f7       	brge	.-10     	; 0x26fc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2706:	ec e2       	ldi	r30, 0x2C	; 44
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
}
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	00 d0       	rcall	.+0      	; 0x2718 <UART_sendString+0x6>
    2718:	0f 92       	push	r0
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	9b 83       	std	Y+3, r25	; 0x03
    2720:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2722:	19 82       	std	Y+1, r1	; 0x01
    2724:	0e c0       	rjmp	.+28     	; 0x2742 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	fc 01       	movw	r30, r24
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	80 81       	ld	r24, Z
    2738:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_sendByte>
		i++;
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	8f 5f       	subi	r24, 0xFF	; 255
    2740:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	fc 01       	movw	r30, r24
    274e:	e2 0f       	add	r30, r18
    2750:	f3 1f       	adc	r31, r19
    2752:	80 81       	ld	r24, Z
    2754:	88 23       	and	r24, r24
    2756:	39 f7       	brne	.-50     	; 0x2726 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <UART_receiveString+0xa>
    276e:	0f 92       	push	r0
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	9b 83       	std	Y+3, r25	; 0x03
    2776:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2778:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	8c 01       	movw	r16, r24
    2786:	02 0f       	add	r16, r18
    2788:	13 1f       	adc	r17, r19
    278a:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <UART_recieveByte>
    278e:	f8 01       	movw	r30, r16
    2790:	80 83       	st	Z, r24
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	8f 5f       	subi	r24, 0xFF	; 255
    2798:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	9b 81       	ldd	r25, Y+3	; 0x03
    27a4:	8c 01       	movw	r16, r24
    27a6:	02 0f       	add	r16, r18
    27a8:	13 1f       	adc	r17, r19
    27aa:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <UART_recieveByte>
    27ae:	f8 01       	movw	r30, r16
    27b0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	fc 01       	movw	r30, r24
    27be:	e2 0f       	add	r30, r18
    27c0:	f3 1f       	adc	r31, r19
    27c2:	80 81       	ld	r24, Z
    27c4:	83 32       	cpi	r24, 0x23	; 35
    27c6:	31 f7       	brne	.-52     	; 0x2794 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	9b 81       	ldd	r25, Y+3	; 0x03
    27d2:	fc 01       	movw	r30, r24
    27d4:	e2 0f       	add	r30, r18
    27d6:	f3 1f       	adc	r31, r19
    27d8:	10 82       	st	Z, r1
}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	08 95       	ret

000027ea <__udivmodsi4>:
    27ea:	a1 e2       	ldi	r26, 0x21	; 33
    27ec:	1a 2e       	mov	r1, r26
    27ee:	aa 1b       	sub	r26, r26
    27f0:	bb 1b       	sub	r27, r27
    27f2:	fd 01       	movw	r30, r26
    27f4:	0d c0       	rjmp	.+26     	; 0x2810 <__udivmodsi4_ep>

000027f6 <__udivmodsi4_loop>:
    27f6:	aa 1f       	adc	r26, r26
    27f8:	bb 1f       	adc	r27, r27
    27fa:	ee 1f       	adc	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	a2 17       	cp	r26, r18
    2800:	b3 07       	cpc	r27, r19
    2802:	e4 07       	cpc	r30, r20
    2804:	f5 07       	cpc	r31, r21
    2806:	20 f0       	brcs	.+8      	; 0x2810 <__udivmodsi4_ep>
    2808:	a2 1b       	sub	r26, r18
    280a:	b3 0b       	sbc	r27, r19
    280c:	e4 0b       	sbc	r30, r20
    280e:	f5 0b       	sbc	r31, r21

00002810 <__udivmodsi4_ep>:
    2810:	66 1f       	adc	r22, r22
    2812:	77 1f       	adc	r23, r23
    2814:	88 1f       	adc	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	1a 94       	dec	r1
    281a:	69 f7       	brne	.-38     	; 0x27f6 <__udivmodsi4_loop>
    281c:	60 95       	com	r22
    281e:	70 95       	com	r23
    2820:	80 95       	com	r24
    2822:	90 95       	com	r25
    2824:	9b 01       	movw	r18, r22
    2826:	ac 01       	movw	r20, r24
    2828:	bd 01       	movw	r22, r26
    282a:	cf 01       	movw	r24, r30
    282c:	08 95       	ret

0000282e <__prologue_saves__>:
    282e:	2f 92       	push	r2
    2830:	3f 92       	push	r3
    2832:	4f 92       	push	r4
    2834:	5f 92       	push	r5
    2836:	6f 92       	push	r6
    2838:	7f 92       	push	r7
    283a:	8f 92       	push	r8
    283c:	9f 92       	push	r9
    283e:	af 92       	push	r10
    2840:	bf 92       	push	r11
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	ca 1b       	sub	r28, r26
    2858:	db 0b       	sbc	r29, r27
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	09 94       	ijmp

00002866 <__epilogue_restores__>:
    2866:	2a 88       	ldd	r2, Y+18	; 0x12
    2868:	39 88       	ldd	r3, Y+17	; 0x11
    286a:	48 88       	ldd	r4, Y+16	; 0x10
    286c:	5f 84       	ldd	r5, Y+15	; 0x0f
    286e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2870:	7d 84       	ldd	r7, Y+13	; 0x0d
    2872:	8c 84       	ldd	r8, Y+12	; 0x0c
    2874:	9b 84       	ldd	r9, Y+11	; 0x0b
    2876:	aa 84       	ldd	r10, Y+10	; 0x0a
    2878:	b9 84       	ldd	r11, Y+9	; 0x09
    287a:	c8 84       	ldd	r12, Y+8	; 0x08
    287c:	df 80       	ldd	r13, Y+7	; 0x07
    287e:	ee 80       	ldd	r14, Y+6	; 0x06
    2880:	fd 80       	ldd	r15, Y+5	; 0x05
    2882:	0c 81       	ldd	r16, Y+4	; 0x04
    2884:	1b 81       	ldd	r17, Y+3	; 0x03
    2886:	aa 81       	ldd	r26, Y+2	; 0x02
    2888:	b9 81       	ldd	r27, Y+1	; 0x01
    288a:	ce 0f       	add	r28, r30
    288c:	d1 1d       	adc	r29, r1
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	ed 01       	movw	r28, r26
    289a:	08 95       	ret

0000289c <itoa>:
    289c:	fb 01       	movw	r30, r22
    289e:	9f 01       	movw	r18, r30
    28a0:	e8 94       	clt
    28a2:	42 30       	cpi	r20, 0x02	; 2
    28a4:	c4 f0       	brlt	.+48     	; 0x28d6 <itoa+0x3a>
    28a6:	45 32       	cpi	r20, 0x25	; 37
    28a8:	b4 f4       	brge	.+44     	; 0x28d6 <itoa+0x3a>
    28aa:	4a 30       	cpi	r20, 0x0A	; 10
    28ac:	29 f4       	brne	.+10     	; 0x28b8 <itoa+0x1c>
    28ae:	97 fb       	bst	r25, 7
    28b0:	1e f4       	brtc	.+6      	; 0x28b8 <itoa+0x1c>
    28b2:	90 95       	com	r25
    28b4:	81 95       	neg	r24
    28b6:	9f 4f       	sbci	r25, 0xFF	; 255
    28b8:	64 2f       	mov	r22, r20
    28ba:	77 27       	eor	r23, r23
    28bc:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__udivmodhi4>
    28c0:	80 5d       	subi	r24, 0xD0	; 208
    28c2:	8a 33       	cpi	r24, 0x3A	; 58
    28c4:	0c f0       	brlt	.+2      	; 0x28c8 <itoa+0x2c>
    28c6:	89 5d       	subi	r24, 0xD9	; 217
    28c8:	81 93       	st	Z+, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	a1 f7       	brne	.-24     	; 0x28b8 <itoa+0x1c>
    28d0:	16 f4       	brtc	.+4      	; 0x28d6 <itoa+0x3a>
    28d2:	5d e2       	ldi	r21, 0x2D	; 45
    28d4:	51 93       	st	Z+, r21
    28d6:	10 82       	st	Z, r1
    28d8:	c9 01       	movw	r24, r18
    28da:	0c 94 6f 14 	jmp	0x28de	; 0x28de <strrev>

000028de <strrev>:
    28de:	dc 01       	movw	r26, r24
    28e0:	fc 01       	movw	r30, r24
    28e2:	67 2f       	mov	r22, r23
    28e4:	71 91       	ld	r23, Z+
    28e6:	77 23       	and	r23, r23
    28e8:	e1 f7       	brne	.-8      	; 0x28e2 <strrev+0x4>
    28ea:	32 97       	sbiw	r30, 0x02	; 2
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <strrev+0x18>
    28ee:	7c 91       	ld	r23, X
    28f0:	6d 93       	st	X+, r22
    28f2:	70 83       	st	Z, r23
    28f4:	62 91       	ld	r22, -Z
    28f6:	ae 17       	cp	r26, r30
    28f8:	bf 07       	cpc	r27, r31
    28fa:	c8 f3       	brcs	.-14     	; 0x28ee <strrev+0x10>
    28fc:	08 95       	ret

000028fe <__udivmodhi4>:
    28fe:	aa 1b       	sub	r26, r26
    2900:	bb 1b       	sub	r27, r27
    2902:	51 e1       	ldi	r21, 0x11	; 17
    2904:	07 c0       	rjmp	.+14     	; 0x2914 <__udivmodhi4_ep>

00002906 <__udivmodhi4_loop>:
    2906:	aa 1f       	adc	r26, r26
    2908:	bb 1f       	adc	r27, r27
    290a:	a6 17       	cp	r26, r22
    290c:	b7 07       	cpc	r27, r23
    290e:	10 f0       	brcs	.+4      	; 0x2914 <__udivmodhi4_ep>
    2910:	a6 1b       	sub	r26, r22
    2912:	b7 0b       	sbc	r27, r23

00002914 <__udivmodhi4_ep>:
    2914:	88 1f       	adc	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	5a 95       	dec	r21
    291a:	a9 f7       	brne	.-22     	; 0x2906 <__udivmodhi4_loop>
    291c:	80 95       	com	r24
    291e:	90 95       	com	r25
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	08 95       	ret

00002926 <_exit>:
    2926:	f8 94       	cli

00002928 <__stop_program>:
    2928:	ff cf       	rjmp	.-2      	; 0x2928 <__stop_program>
